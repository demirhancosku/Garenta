/*
 
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
  
 File: ZGARENTA_GET_CUST_KK_SRVServiceV0.h
 Abstract: The generated proxy classes for the ZGARENTA_GET_CUST_KK_SRV Service.  
*/

#import "ZGARENTA_GET_CUST_KK_SRVServiceV0.h"
#import "BaseODataObject.h"
#import "Logger.h"
#import "ODataEntitySchema.h"
#import "ODataCollection.h"
#import "ODataFunctionImport.h"
#import "TypeConverter.h"

#define ZGARENTA_GET_CUST_KK_SRV_SERVICE_DOCUMENTV0 @"ZGARENTA_GET_CUST_KK_SRVServiceDocumentV0"
#define ZGARENTA_GET_CUST_KK_SRV_SERVICE_METADATAV0 @"ZGARENTA_GET_CUST_KK_SRVServiceMetadataV0"

#pragma mark - Complex Types



#pragma mark - Entity Types


#pragma mark - CustKKServiceV0
@implementation CustKKServiceV0

static NSMutableDictionary *custKKServiceLabels = nil;
static ODataEntitySchema *custKKServiceEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:custKKServiceEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [@{} mutableCopy];
    if ([self.ET_CARDSSet count] > 0) {
    	dictionary[@"ET_CARDSSet"] = [self createSDMEntriesForNavigationPropertyEntries:self.ET_CARDSSet];
    }
    return dictionary;
}


- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.IKunnr forSDMPropertyWithName:@"IKunnr" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.EReturn forSDMPropertyWithName:@"EReturn" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"CustKKSet" workspaceOfCollection:nil];
    custKKServiceEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"CustKKSet" andService:aService];
    	if (properties) {    
	    	custKKServiceLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	custKKServiceLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}

+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:custKKServiceLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.IKunnr = [self getStringValueForSDMPropertyWithName:@"IKunnr"];
	self.EReturn = [self getStringValueForSDMPropertyWithName:@"EReturn"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    self.ET_CARDSSetQuery = [self getRelatedLinkForNavigationName:@"ET_CARDSSet"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"ET_CARDSSet"];
    self.ET_CARDSSet = [ET_CARDSV0 createET_CARDSEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createCustKKServiceEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        CustKKServiceV0 *custKKServiceObject = [[CustKKServiceV0 alloc] initWithSDMEntry:entry];
        [entries addObject:custKKServiceObject];
    }
    return entries;
}


+ (NSMutableArray *)parseCustKKServiceEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:custKKServiceEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [CustKKServiceV0 createCustKKServiceEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedCustKKServiceEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:custKKServiceEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [CustKKServiceV0 createCustKKServiceEntriesForSDMEntries:sdmEntries];
}

+ (CustKKServiceV0 *)parseCustKKServiceEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *custKKServiceEntries = [CustKKServiceV0 parseCustKKServiceEntriesWithData:aData error:error];
    if (!custKKServiceEntries) {
    	return nil;
    }
    return (CustKKServiceV0 *)[CustKKServiceV0 getFirstObjectFromArray:custKKServiceEntries];
}

+ (CustKKServiceV0 *)parseExpandedCustKKServiceEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:custKKServiceEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *custKKServiceEntries = [CustKKServiceV0 createCustKKServiceEntriesForSDMEntries:sdmEntries];
	return (CustKKServiceV0 *)[CustKKServiceV0 getFirstObjectFromArray:custKKServiceEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadET_CARDSSetWithData:(NSData *)aData error:(NSError **)error
{
    self.ET_CARDSSet = [ET_CARDSV0 parseET_CARDSEntriesWithData:aData error:error];
    if (!self.ET_CARDSSet) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - ET_CARDSV0
@implementation ET_CARDSV0

static NSMutableDictionary *eT_CARDSLabels = nil;
static ODataEntitySchema *eT_CARDSEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptyODataEntryWithSchema:eT_CARDSEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        self.baseUrl = nil;
    }
    return self;
}



- (ODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.UniqueId forSDMPropertyWithName:@"UniqueId" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Kartno forSDMPropertyWithName:@"Kartno" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(ODataServiceDocument *)aService
{
    ODataCollection *collectionSchema = [aService.schema getCollectionByName:@"ET_CARDSet" workspaceOfCollection:nil];
    eT_CARDSEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(ODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"ET_CARDSet" andService:aService];
    	if (properties) {    
	    	eT_CARDSLabels = [@{} mutableCopy];
	    	for (ODataPropertyInfo *property in [properties allValues]) {
	        	eT_CARDSLabels[property.name] = property.label;;
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:eT_CARDSLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	self.UniqueId = [self getStringValueForSDMPropertyWithName:@"UniqueId"];
	self.Kartno = [self getStringValueForSDMPropertyWithName:@"Kartno"];
}

+ (NSMutableArray *)createET_CARDSEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [@[] mutableCopy];
    for (ODataEntry *entry in sdmEntries) {
        ET_CARDSV0 *eT_CARDSObject = [[ET_CARDSV0 alloc] initWithSDMEntry:entry];
        [entries addObject:eT_CARDSObject];
    }
    return entries;
}


+ (NSMutableArray *)parseET_CARDSEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:eT_CARDSEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [ET_CARDSV0 createET_CARDSEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedET_CARDSEntriesWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:eT_CARDSEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [ET_CARDSV0 createET_CARDSEntriesForSDMEntries:sdmEntries];
}

+ (ET_CARDSV0 *)parseET_CARDSEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *eT_CARDSEntries = [ET_CARDSV0 parseET_CARDSEntriesWithData:aData error:error];
    if (!eT_CARDSEntries) {
    	return nil;
    }
    return (ET_CARDSV0 *)[ET_CARDSV0 getFirstObjectFromArray:eT_CARDSEntries];
}

+ (ET_CARDSV0 *)parseExpandedET_CARDSEntryWithData:(NSData *)aData andServiceDocument:(ODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:eT_CARDSEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *eT_CARDSEntries = [ET_CARDSV0 createET_CARDSEntriesForSDMEntries:sdmEntries];
	return (ET_CARDSV0 *)[ET_CARDSV0 getFirstObjectFromArray:eT_CARDSEntries];
}



@end


#pragma mark - ZGARENTA_GET_CUST_KK_SRVV0 Service Proxy


@implementation ZGARENTA_GET_CUST_KK_SRVServiceV0

- (NSString *)getServiceDocumentFilename
{
	return ZGARENTA_GET_CUST_KK_SRV_SERVICE_DOCUMENTV0;
}

- (NSString *)getServiceMetadataFilename
{
	return ZGARENTA_GET_CUST_KK_SRV_SERVICE_METADATAV0;
}

- (void)loadEntitySetQueries
{
	[super loadEntitySetQueries];
    self.CustKKSetQuery = [self getQueryForRelativePath:@"CustKKSet"];
    self.ET_CARDSetQuery = [self getQueryForRelativePath:@"ET_CARDSet"];
}

- (void)loadEntitySchemaForAllEntityTypes
{
    [super loadEntitySchemaForAllEntityTypes];
    [CustKKServiceV0 loadEntitySchema:self.sdmServiceDocument];
    [ET_CARDSV0 loadEntitySchema:self.sdmServiceDocument];
}

- (void)loadLabels
{
    [super loadLabels];
    [CustKKServiceV0 loadLabels:self.sdmServiceDocument];
    [ET_CARDSV0 loadLabels:self.sdmServiceDocument];
}

 
#pragma mark Service Entity Set methods
- (NSMutableArray *)getCustKKSetWithData:(NSData *)aData error:(NSError **)error
{
	return [CustKKServiceV0 parseExpandedCustKKServiceEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getCustKKSetEntryQueryWithIKunnr:(NSString *)IKunnr
{
	IKunnr = [ODataQuery encodeURLParameter:IKunnr];
	NSString *relativePath = [NSString stringWithFormat:@"CustKKSet(IKunnr=%@)", IKunnr];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getCustKKSetEntryQueryTypedWithIKunnr:(NSString *)IKunnr
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *IKunnrUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:IKunnr]];
	NSString *relativePath = [NSString stringWithFormat:@"CustKKSet(IKunnr=%@)", IKunnrUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (CustKKServiceV0 *)getCustKKSetEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [CustKKServiceV0 parseExpandedCustKKServiceEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getET_CARDSetWithData:(NSData *)aData error:(NSError **)error
{
	return [ET_CARDSV0 parseExpandedET_CARDSEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getET_CARDSetEntryQueryWithUniqueId:(NSString *)UniqueId andKartno:(NSString *)Kartno
{
	UniqueId = [ODataQuery encodeURLParameter:UniqueId];
	Kartno = [ODataQuery encodeURLParameter:Kartno];
	NSString *relativePath = [NSString stringWithFormat:@"ET_CARDSet(UniqueId=%@,Kartno=%@)", UniqueId, Kartno];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getET_CARDSetEntryQueryTypedWithUniqueId:(NSString *)UniqueId andKartno:(NSString *)Kartno
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *UniqueIdUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:UniqueId]];
	NSString *KartnoUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:Kartno]];
	NSString *relativePath = [NSString stringWithFormat:@"ET_CARDSet(UniqueId=%@,Kartno=%@)", UniqueIdUri, KartnoUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ET_CARDSV0 *)getET_CARDSetEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [ET_CARDSV0 parseExpandedET_CARDSEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}



#pragma mark Service Function Import methods 

@end
