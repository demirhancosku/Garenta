/*
 
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
  
 File: ZGARENTA_LOGIN_SRV_01RequestHandler.h
 Abstract: A singleton class responsible for sending the appropriate service requests (for retrieving and modifying service data) and parsing the responses into semantic objects, using the ZGARENTA_LOGIN_SRV_01 service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.
 
 */

#import <Foundation/Foundation.h>
#import "RequestDelegate.h"
#import "SDMConnectivityHelper.h"
#import "ZGARENTA_LOGIN_SRV_01ServiceDeclarations.h"
#import "ServiceNegotiator.h"
#import "Authenticating.h"



#pragma mark - Notifications

//Notification UserInfo keys:
//extern NSString * const kResponseItem; ///< Single item response
//extern NSString * const kResponseItems; ///< Multiple items response
//extern NSString * const kResponseData; ///< Raw response data
//extern NSString * const kRequestedMediaLink; ///< Media link item
//extern NSString * const kServerResponseError; ///< Server response error
//extern NSString * const kParsingError; ///< Parsing response error
//extern NSString * const kResponseParentItem; ///< Item selected in the view previous to the one triggered the request
//extern NSString * const kBatchRequest; ///< BatchRequest object containing the response
//
////Notification keys:
//extern NSString * const kAuthenticationNeededNotification; ///< Notification key for request authentication challenge.



extern NSString * const kLoadET_CARDTYPESSetCompletedNotification; ///< Notification key for complete loading of ET_CARDTYPESSet items.
extern NSString * const kLoadET_CARDTYPESCompletedNotification; ///< Notification key for complete loading of a specific ET_CARDTYPES item.
extern NSString * const kCreateET_CARDTYPESCompletedNotification; ///< Notification key for complete creating a ET_CARDTYPES collection item.
extern NSString * const kUpdateET_CARDTYPESCompletedNotification; ///< Notification key for complete updating a ET_CARDTYPES collection item.
extern NSString * const kDeleteET_CARDTYPESCompletedNotification; ///< Notification key for complete deleting a ET_CARDTYPES item.

extern NSString * const kLoadET_PARTNERSSetCompletedNotification; ///< Notification key for complete loading of ET_PARTNERSSet items.
extern NSString * const kLoadET_PARTNERSCompletedNotification; ///< Notification key for complete loading of a specific ET_PARTNERS item.
extern NSString * const kCreateET_PARTNERSCompletedNotification; ///< Notification key for complete creating a ET_PARTNERS collection item.
extern NSString * const kUpdateET_PARTNERSCompletedNotification; ///< Notification key for complete updating a ET_PARTNERS collection item.
extern NSString * const kDeleteET_PARTNERSCompletedNotification; ///< Notification key for complete deleting a ET_PARTNERS item.

extern NSString * const kLoadET_RETURNSetCompletedNotification; ///< Notification key for complete loading of ET_RETURNSet items.
extern NSString * const kLoadET_LOGRETURNCompletedNotification; ///< Notification key for complete loading of a specific ET_LOGRETURN item.
extern NSString * const kCreateET_LOGRETURNCompletedNotification; ///< Notification key for complete creating a ET_LOGRETURN collection item.
extern NSString * const kUpdateET_LOGRETURNCompletedNotification; ///< Notification key for complete updating a ET_LOGRETURN collection item.
extern NSString * const kDeleteET_LOGRETURNCompletedNotification; ///< Notification key for complete deleting a ET_LOGRETURN item.

extern NSString * const kLoadLoginServiceSetCompletedNotification; ///< Notification key for complete loading of LoginServiceSet items.
extern NSString * const kLoadLoginServiceCompletedNotification; ///< Notification key for complete loading of a specific LoginService item.
extern NSString * const kLoadET_CARDTYPESSetForLoginServiceCompletedNotification; ///< Notification key for complete loading of ET_CARDTYPESSet navigation items for a specific LoginService item.
extern NSString * const kLoadET_PARTNERSSetForLoginServiceCompletedNotification; ///< Notification key for complete loading of ET_PARTNERSSet navigation items for a specific LoginService item.
extern NSString * const kLoadET_RETURNSetForLoginServiceCompletedNotification; ///< Notification key for complete loading of ET_RETURNSet navigation items for a specific LoginService item.
extern NSString * const kCreateLoginServiceCompletedNotification; ///< Notification key for complete creating a LoginService collection item.
extern NSString * const kUpdateLoginServiceCompletedNotification; ///< Notification key for complete updating a LoginService collection item.
extern NSString * const kDeleteLoginServiceCompletedNotification; ///< Notification key for complete deleting a LoginService item.







#pragma mark -

/**
 A singleton class responsible for sending the appropriate service requests (for retrieving service data needed by the application views) and parsing the responses into semantic objects, using the ZGARENTA_LOGIN_SRV_01 service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.
 */
@interface ZGARENTA_LOGIN_SRV_01RequestHandler : NSObject <RequestDelegate, SDMConnectivityHelperDelegate> {
    SDMConnectivityHelper *connectivityHelper;
    ZGARENTA_LOGIN_SRV_01Service *service;
    NSString *deviceLanguage;
	ServiceNegotiator *serviceNegotiator;
	SecIdentityRef certificate;
	CSRFData *csrfData;
}

@property (strong, nonatomic, setter = setServiceDocumentURL:) NSString *serviceDocumentURL; ///< ZGARENTA_LOGIN_SRV_01 service document URL (used as base URL for service requests). 
@property (strong, nonatomic, setter = setSAPClient:) NSString *client; ///< SAP client (may be empty or nil for default client). 
@property (assign, nonatomic) BOOL useServiceNegotiation; ///< Indicates if the service negotiation process should be performed. This property is considered only when the useLocalMetadata property is set to NO.
@property (assign, nonatomic) BOOL useLocalMetadata; ///< Indicates if the service proxy is initialized using local metadata.
@property (assign, nonatomic) BOOL useJSON; ///< Indicates if the service calls are done using JSON or XML.


/**
 @return ZGARENTA_LOGIN_SRV_01RequestHandler singleton instance.
 */
+ (ZGARENTA_LOGIN_SRV_01RequestHandler *)uniqueInstance;

/**
 @return BOOL indicating if service is valid.
 */
- (BOOL)isServiceValid;

#pragma mark - User Login

/**
 Authenticates the given user name and password against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process.  If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object.
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required, make sure to set the application and SUP server values in the ConnectivitySettings class, before calling this method.
 For enabling Single Sign On (SSO):
 At the first application run pass the username and password to securely store the user credentials on the device.
 At later calls, pass empty credentials to exctract the stored user credentials. 
 @param aUsername The user name used for the authentication. If domain is required, the username should be in the format: [domain]\[user]
 @param aPassword The password for the provided user name.
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword error:(NSError * __autoreleasing *)error;

/**
 Authenticates the client certificate against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process. If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object (without service negotiation).
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required use the executeLoginWithCertificateWithPassword:andFileName:andFileExtension:error: method.
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithCertificateWithError:(NSError *__autoreleasing *)error;

/**
 Authenticates the client certificate against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process. If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object (without service negotiation).
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required, make sure to set the application and SUP server values in the ConnectivitySettings class, before calling this method.
 @param aPassword Certificate password.
 @param aFileName Certificate file name.
 @param aFileExtension Certificate file extension.
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithCertificateWithPassword:(NSString *)aPassword andFileName:(NSString *)aFileName andFileExtension:(NSString *)aFileExtension error:(NSError *__autoreleasing *)error;



#pragma mark - Service Negotiation

/**
 Updates the service document URL with the result of the best matching service query of the Gateway service catalog.
 Is performed as part of the login process (in the executeLoginWithUsername:andPassword method), if the useServiceNegotiation propery is YES.
 @param authenticator The implementation of Authenticating protocol according to the required authentication method.
 @param error A pointer to an NSError object.
 @return BOOL indicating if service negotiation succeeded.
 */
- (BOOL)negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:(id <Authenticating>)authenticator error:(NSError * __autoreleasing *)error;

#pragma mark - Batch

/**
 Start a batch request which will aggregate all service calls made through the RequestHandler.
 Call the executeBatch method to execute the aggregated calls in one batch request.
 @param aNotificationName A name to post a notification to once the batch request is completed, can be nil.
 */
- (void)startBatchWithNotificationName:(NSString *)aNotificationName;

/**
 Closes a changeSet and adds requests to new changeSet (in batch request).
 */
- (void)closeExistingChangeSet;

/**
 Executes a batch request, call the startBatchWithNotificationName: before in order to initiate a batch request object.
 */
- (void)executeBatch;




#pragma mark - ET_CARDTYPESSet methods

/**
 Load the service entity-set ET_CARDTYPESSet items, parsed into ET_CARDTYPES objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_CARDTYPESSetCompletedNotification for operation completion, along with the array of ET_CARDTYPES items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadET_CARDTYPESSet;

/**
 Load a specific ET_CARDTYPES item, parsed into ET_CARDTYPES object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_CARDTYPESCompletedNotification for operation completion, along with the ET_CARDTYPES item given as parameter (for kResponseParentItem key), and the response ET_CARDTYPES item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_CARDTYPES The specific item to load.
 */
- (void)loadET_CARDTYPES:(ET_CARDTYPES *)aET_CARDTYPES;

/**
 Creates a ET_CARDTYPES item and add it to the ET_CARDTYPESSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateET_CARDTYPESCompletedNotification for operation completion, along with the ET_CARDTYPES item given as parameter (for kResponseParentItem key), and the response ET_CARDTYPES item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_CARDTYPES The specific item to create.
 */
- (void)createET_CARDTYPES:(ET_CARDTYPES *)aET_CARDTYPES;

/**
 Updates a ET_CARDTYPES item in the ET_CARDTYPESSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateET_CARDTYPESCompletedNotification for operation completion, along with the ET_CARDTYPES item given as parameter (for kResponseParentItem key), and the response ET_CARDTYPES item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_CARDTYPES The specific item to update.
 */
- (void)updateET_CARDTYPES:(ET_CARDTYPES *)aET_CARDTYPES;

/**
 Deletes a specific ET_CARDTYPES item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteET_CARDTYPESCompletedNotification for operation completion, along with the ET_CARDTYPES item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_CARDTYPES The specific item to delete.
 */
- (void)deleteET_CARDTYPES:(ET_CARDTYPES *)aET_CARDTYPES;

#pragma mark - ET_PARTNERSSet methods

/**
 Load the service entity-set ET_PARTNERSSet items, parsed into ET_PARTNERS objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_PARTNERSSetCompletedNotification for operation completion, along with the array of ET_PARTNERS items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadET_PARTNERSSet;

/**
 Load a specific ET_PARTNERS item, parsed into ET_PARTNERS object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_PARTNERSCompletedNotification for operation completion, along with the ET_PARTNERS item given as parameter (for kResponseParentItem key), and the response ET_PARTNERS item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_PARTNERS The specific item to load.
 */
- (void)loadET_PARTNERS:(ET_PARTNERS *)aET_PARTNERS;

/**
 Creates a ET_PARTNERS item and add it to the ET_PARTNERSSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateET_PARTNERSCompletedNotification for operation completion, along with the ET_PARTNERS item given as parameter (for kResponseParentItem key), and the response ET_PARTNERS item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_PARTNERS The specific item to create.
 */
- (void)createET_PARTNERS:(ET_PARTNERS *)aET_PARTNERS;

/**
 Updates a ET_PARTNERS item in the ET_PARTNERSSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateET_PARTNERSCompletedNotification for operation completion, along with the ET_PARTNERS item given as parameter (for kResponseParentItem key), and the response ET_PARTNERS item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_PARTNERS The specific item to update.
 */
- (void)updateET_PARTNERS:(ET_PARTNERS *)aET_PARTNERS;

/**
 Deletes a specific ET_PARTNERS item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteET_PARTNERSCompletedNotification for operation completion, along with the ET_PARTNERS item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_PARTNERS The specific item to delete.
 */
- (void)deleteET_PARTNERS:(ET_PARTNERS *)aET_PARTNERS;

#pragma mark - ET_RETURNSet methods

/**
 Load the service entity-set ET_RETURNSet items, parsed into ET_LOGRETURN objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_RETURNSetCompletedNotification for operation completion, along with the array of ET_LOGRETURN items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadET_RETURNSet;

/**
 Load a specific ET_LOGRETURN item, parsed into ET_LOGRETURN object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_LOGRETURNCompletedNotification for operation completion, along with the ET_LOGRETURN item given as parameter (for kResponseParentItem key), and the response ET_LOGRETURN item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_LOGRETURN The specific item to load.
 */
- (void)loadET_LOGRETURN:(ET_LOGRETURN *)aET_LOGRETURN;

/**
 Creates a ET_LOGRETURN item and add it to the ET_RETURNSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateET_LOGRETURNCompletedNotification for operation completion, along with the ET_LOGRETURN item given as parameter (for kResponseParentItem key), and the response ET_LOGRETURN item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_LOGRETURN The specific item to create.
 */
- (void)createET_LOGRETURN:(ET_LOGRETURN *)aET_LOGRETURN;

/**
 Updates a ET_LOGRETURN item in the ET_RETURNSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateET_LOGRETURNCompletedNotification for operation completion, along with the ET_LOGRETURN item given as parameter (for kResponseParentItem key), and the response ET_LOGRETURN item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_LOGRETURN The specific item to update.
 */
- (void)updateET_LOGRETURN:(ET_LOGRETURN *)aET_LOGRETURN;

/**
 Deletes a specific ET_LOGRETURN item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteET_LOGRETURNCompletedNotification for operation completion, along with the ET_LOGRETURN item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_LOGRETURN The specific item to delete.
 */
- (void)deleteET_LOGRETURN:(ET_LOGRETURN *)aET_LOGRETURN;

#pragma mark - LoginServiceSet methods

/**
 Load the service entity-set LoginServiceSet items, parsed into LoginService objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadLoginServiceSetCompletedNotification for operation completion, along with the array of LoginService items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadLoginServiceSet;

/**
 Load a specific LoginService item, parsed into LoginService object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadLoginServiceCompletedNotification for operation completion, along with the LoginService item given as parameter (for kResponseParentItem key), and the response LoginService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aLoginService The specific item to load.
 */
- (void)loadLoginService:(LoginService *)aLoginService;
/**
 Load a specific LoginService item, parsed into LoginService object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadLoginServiceCompletedNotification for operation completion, along with the LoginService item given as parameter (for kResponseParentItem key), and the response LoginService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aLoginService The specific item to load.
 @param expand Should load the specific item with all its related items (using $expand query parameter)
 */
- (void)loadLoginService:(LoginService *)aLoginService expand:(BOOL)expand;

/**
 Load the ET_CARDTYPESSet navigation items for a specific LoginService item, parsed into ET_CARDTYPES objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_CARDTYPESSetForLoginServiceCompletedNotification for operation completion, along with the LoginService item given as parameter (for kResponseParentItem key), and the array of the ET_CARDTYPES items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aLoginService The specific item to load its ET_CARDTYPESSet navigation items.
 */
- (void)loadET_CARDTYPESSetForLoginService:(LoginService *)aLoginService;

/**
 Load the ET_PARTNERSSet navigation items for a specific LoginService item, parsed into ET_PARTNERS objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_PARTNERSSetForLoginServiceCompletedNotification for operation completion, along with the LoginService item given as parameter (for kResponseParentItem key), and the array of the ET_PARTNERS items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aLoginService The specific item to load its ET_PARTNERSSet navigation items.
 */
- (void)loadET_PARTNERSSetForLoginService:(LoginService *)aLoginService;

/**
 Load the ET_RETURNSet navigation items for a specific LoginService item, parsed into ET_LOGRETURN objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_RETURNSetForLoginServiceCompletedNotification for operation completion, along with the LoginService item given as parameter (for kResponseParentItem key), and the array of the ET_LOGRETURN items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aLoginService The specific item to load its ET_RETURNSet navigation items.
 */
- (void)loadET_RETURNSetForLoginService:(LoginService *)aLoginService;

/**
 Creates a LoginService item and add it to the LoginServiceSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateLoginServiceCompletedNotification for operation completion, along with the LoginService item given as parameter (for kResponseParentItem key), and the response LoginService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aLoginService The specific item to create.
 */
- (void)createLoginService:(LoginService *)aLoginService;

/**
 Creates a ET_CARDTYPES item for a LoginService item (using ET_CARDTYPESSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateET_CARDTYPESCompletedNotification for operation completion, along with the ET_CARDTYPES item given as parameter (for kResponseParentItem key), and the response ET_CARDTYPES item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewET_CARDTYPES The specific item to create.
 @param aLoginService The item which the created item will be associated to.
 */
- (void)createET_CARDTYPES:(ET_CARDTYPES *)aNewET_CARDTYPES forLoginService:(LoginService *)aLoginService;

/**
 Creates a ET_PARTNERS item for a LoginService item (using ET_PARTNERSSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateET_PARTNERSCompletedNotification for operation completion, along with the ET_PARTNERS item given as parameter (for kResponseParentItem key), and the response ET_PARTNERS item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewET_PARTNERS The specific item to create.
 @param aLoginService The item which the created item will be associated to.
 */
- (void)createET_PARTNERS:(ET_PARTNERS *)aNewET_PARTNERS forLoginService:(LoginService *)aLoginService;

/**
 Creates a ET_LOGRETURN item for a LoginService item (using ET_RETURNSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateET_LOGRETURNCompletedNotification for operation completion, along with the ET_LOGRETURN item given as parameter (for kResponseParentItem key), and the response ET_LOGRETURN item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewET_LOGRETURN The specific item to create.
 @param aLoginService The item which the created item will be associated to.
 */
- (void)createET_LOGRETURN:(ET_LOGRETURN *)aNewET_LOGRETURN forLoginService:(LoginService *)aLoginService;

/**
 Updates a LoginService item in the LoginServiceSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateLoginServiceCompletedNotification for operation completion, along with the LoginService item given as parameter (for kResponseParentItem key), and the response LoginService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aLoginService The specific item to update.
 */
- (void)updateLoginService:(LoginService *)aLoginService;

/**
 Deletes a specific LoginService item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteLoginServiceCompletedNotification for operation completion, along with the LoginService item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aLoginService The specific item to delete.
 */
- (void)deleteLoginService:(LoginService *)aLoginService;

#pragma mark - Function Import methods



@end
