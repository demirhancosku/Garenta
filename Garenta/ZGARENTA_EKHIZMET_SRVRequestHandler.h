/*
 
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
  
 File: ZGARENTA_EKHIZMET_SRVRequestHandler.h
 Abstract: A singleton class responsible for sending the appropriate service requests (for retrieving and modifying service data) and parsing the responses into semantic objects, using the ZGARENTA_EKHIZMET_SRV service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.
 
 */

#import <Foundation/Foundation.h>
#import "RequestDelegate.h"
#import "SDMConnectivityHelper.h"
#import "ZGARENTA_EKHIZMET_SRVServiceDeclarations.h"
#import "ServiceNegotiator.h"
#import "Authenticating.h"



#pragma mark - Notifications

//Notification UserInfo keys:
//extern NSString * const kResponseItem; ///< Single item response
//extern NSString * const kResponseItems; ///< Multiple items response
//extern NSString * const kResponseData; ///< Raw response data
//extern NSString * const kRequestedMediaLink; ///< Media link item
//extern NSString * const kServerResponseError; ///< Server response error
//extern NSString * const kParsingError; ///< Parsing response error
//extern NSString * const kResponseParentItem; ///< Item selected in the view previous to the one triggered the request
//extern NSString * const kBatchRequest; ///< BatchRequest object containing the response

//Notification keys:
//extern NSString * const kAuthenticationNeededNotification; ///< Notification key for request authentication challenge.



extern NSString * const kLoadAdditionalEquipmentServiceSetCompletedNotification; ///< Notification key for complete loading of AdditionalEquipmentServiceSet items.
extern NSString * const kLoadAdditionalEquipmentServiceCompletedNotification; ///< Notification key for complete loading of a specific AdditionalEquipmentService item.
extern NSString * const kLoadEXPT_EKPLISTSetForAdditionalEquipmentServiceCompletedNotification; ///< Notification key for complete loading of EXPT_EKPLISTSet navigation items for a specific AdditionalEquipmentService item.
extern NSString * const kLoadEXPT_SIGORTASetForAdditionalEquipmentServiceCompletedNotification; ///< Notification key for complete loading of EXPT_SIGORTASet navigation items for a specific AdditionalEquipmentService item.
extern NSString * const kLoadEXPT_HIZMETSetForAdditionalEquipmentServiceCompletedNotification; ///< Notification key for complete loading of EXPT_HIZMETSet navigation items for a specific AdditionalEquipmentService item.
extern NSString * const kLoadEXPT_HASARSetForAdditionalEquipmentServiceCompletedNotification; ///< Notification key for complete loading of EXPT_HASARSet navigation items for a specific AdditionalEquipmentService item.
extern NSString * const kLoadEXPT_EKSURUCUSetForAdditionalEquipmentServiceCompletedNotification; ///< Notification key for complete loading of EXPT_EKSURUCUSet navigation items for a specific AdditionalEquipmentService item.
extern NSString * const kCreateAdditionalEquipmentServiceCompletedNotification; ///< Notification key for complete creating a AdditionalEquipmentService collection item.
extern NSString * const kUpdateAdditionalEquipmentServiceCompletedNotification; ///< Notification key for complete updating a AdditionalEquipmentService collection item.
extern NSString * const kDeleteAdditionalEquipmentServiceCompletedNotification; ///< Notification key for complete deleting a AdditionalEquipmentService item.

extern NSString * const kLoadEXPT_EKPLISTSetCompletedNotification; ///< Notification key for complete loading of EXPT_EKPLISTSet items.
extern NSString * const kLoadEXPT_EKPLISTCompletedNotification; ///< Notification key for complete loading of a specific EXPT_EKPLIST item.
extern NSString * const kCreateEXPT_EKPLISTCompletedNotification; ///< Notification key for complete creating a EXPT_EKPLIST collection item.
extern NSString * const kUpdateEXPT_EKPLISTCompletedNotification; ///< Notification key for complete updating a EXPT_EKPLIST collection item.
extern NSString * const kDeleteEXPT_EKPLISTCompletedNotification; ///< Notification key for complete deleting a EXPT_EKPLIST item.

extern NSString * const kLoadEXPT_EKSURUCUSetCompletedNotification; ///< Notification key for complete loading of EXPT_EKSURUCUSet items.
extern NSString * const kLoadEXPT_EKSURUCUCompletedNotification; ///< Notification key for complete loading of a specific EXPT_EKSURUCU item.
extern NSString * const kCreateEXPT_EKSURUCUCompletedNotification; ///< Notification key for complete creating a EXPT_EKSURUCU collection item.
extern NSString * const kUpdateEXPT_EKSURUCUCompletedNotification; ///< Notification key for complete updating a EXPT_EKSURUCU collection item.
extern NSString * const kDeleteEXPT_EKSURUCUCompletedNotification; ///< Notification key for complete deleting a EXPT_EKSURUCU item.

extern NSString * const kLoadEXPT_HASARSetCompletedNotification; ///< Notification key for complete loading of EXPT_HASARSet items.
extern NSString * const kLoadEXPT_HASARCompletedNotification; ///< Notification key for complete loading of a specific EXPT_HASAR item.
extern NSString * const kCreateEXPT_HASARCompletedNotification; ///< Notification key for complete creating a EXPT_HASAR collection item.
extern NSString * const kUpdateEXPT_HASARCompletedNotification; ///< Notification key for complete updating a EXPT_HASAR collection item.
extern NSString * const kDeleteEXPT_HASARCompletedNotification; ///< Notification key for complete deleting a EXPT_HASAR item.

extern NSString * const kLoadEXPT_HIZMETSetCompletedNotification; ///< Notification key for complete loading of EXPT_HIZMETSet items.
extern NSString * const kLoadEXPT_HIZMETCompletedNotification; ///< Notification key for complete loading of a specific EXPT_HIZMET item.
extern NSString * const kCreateEXPT_HIZMETCompletedNotification; ///< Notification key for complete creating a EXPT_HIZMET collection item.
extern NSString * const kUpdateEXPT_HIZMETCompletedNotification; ///< Notification key for complete updating a EXPT_HIZMET collection item.
extern NSString * const kDeleteEXPT_HIZMETCompletedNotification; ///< Notification key for complete deleting a EXPT_HIZMET item.

extern NSString * const kLoadEXPT_SIGORTASetCompletedNotification; ///< Notification key for complete loading of EXPT_SIGORTASet items.
extern NSString * const kLoadEXPT_SIGORTACompletedNotification; ///< Notification key for complete loading of a specific EXPT_SIGORTA item.
extern NSString * const kCreateEXPT_SIGORTACompletedNotification; ///< Notification key for complete creating a EXPT_SIGORTA collection item.
extern NSString * const kUpdateEXPT_SIGORTACompletedNotification; ///< Notification key for complete updating a EXPT_SIGORTA collection item.
extern NSString * const kDeleteEXPT_SIGORTACompletedNotification; ///< Notification key for complete deleting a EXPT_SIGORTA item.









#pragma mark -

/**
 A singleton class responsible for sending the appropriate service requests (for retrieving service data needed by the application views) and parsing the responses into semantic objects, using the ZGARENTA_EKHIZMET_SRV service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.
 */
@interface ZGARENTA_EKHIZMET_SRVRequestHandler : NSObject <RequestDelegate, SDMConnectivityHelperDelegate> {
    SDMConnectivityHelper *connectivityHelper;
    ZGARENTA_EKHIZMET_SRVService *service;
    NSString *deviceLanguage;
	ServiceNegotiator *serviceNegotiator;
	SecIdentityRef certificate;
	CSRFData *csrfData;
}

@property (strong, nonatomic, setter = setServiceDocumentURL:) NSString *serviceDocumentURL; ///< ZGARENTA_EKHIZMET_SRV service document URL (used as base URL for service requests). 
@property (strong, nonatomic, setter = setSAPClient:) NSString *client; ///< SAP client (may be empty or nil for default client). 
@property (assign, nonatomic) BOOL useServiceNegotiation; ///< Indicates if the service negotiation process should be performed. This property is considered only when the useLocalMetadata property is set to NO.
@property (assign, nonatomic) BOOL useLocalMetadata; ///< Indicates if the service proxy is initialized using local metadata.
@property (assign, nonatomic) BOOL useJSON; ///< Indicates if the service calls are done using JSON or XML.


/**
 @return ZGARENTA_EKHIZMET_SRVRequestHandler singleton instance.
 */
+ (ZGARENTA_EKHIZMET_SRVRequestHandler *)uniqueInstance;

/**
 @return BOOL indicating if service is valid.
 */
- (BOOL)isServiceValid;

#pragma mark - User Login

/**
 Authenticates the given user name and password against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process.  If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object.
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required, make sure to set the application and SUP server values in the ConnectivitySettings class, before calling this method.
 For enabling Single Sign On (SSO):
 At the first application run pass the username and password to securely store the user credentials on the device.
 At later calls, pass empty credentials to exctract the stored user credentials. 
 @param aUsername The user name used for the authentication. If domain is required, the username should be in the format: [domain]\[user]
 @param aPassword The password for the provided user name.
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword error:(NSError * __autoreleasing *)error;

/**
 Authenticates the client certificate against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process. If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object (without service negotiation).
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required use the executeLoginWithCertificateWithPassword:andFileName:andFileExtension:error: method.
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithCertificateWithError:(NSError *__autoreleasing *)error;

/**
 Authenticates the client certificate against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process. If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object (without service negotiation).
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required, make sure to set the application and SUP server values in the ConnectivitySettings class, before calling this method.
 @param aPassword Certificate password.
 @param aFileName Certificate file name.
 @param aFileExtension Certificate file extension.
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithCertificateWithPassword:(NSString *)aPassword andFileName:(NSString *)aFileName andFileExtension:(NSString *)aFileExtension error:(NSError *__autoreleasing *)error;



#pragma mark - Service Negotiation

/**
 Updates the service document URL with the result of the best matching service query of the Gateway service catalog.
 Is performed as part of the login process (in the executeLoginWithUsername:andPassword method), if the useServiceNegotiation propery is YES.
 @param authenticator The implementation of Authenticating protocol according to the required authentication method.
 @param error A pointer to an NSError object.
 @return BOOL indicating if service negotiation succeeded.
 */
- (BOOL)negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:(id <Authenticating>)authenticator error:(NSError * __autoreleasing *)error;

#pragma mark - Batch

/**
 Start a batch request which will aggregate all service calls made through the RequestHandler.
 Call the executeBatch method to execute the aggregated calls in one batch request.
 @param aNotificationName A name to post a notification to once the batch request is completed, can be nil.
 */
- (void)startBatchWithNotificationName:(NSString *)aNotificationName;

/**
 Closes a changeSet and adds requests to new changeSet (in batch request).
 */
- (void)closeExistingChangeSet;

/**
 Executes a batch request, call the startBatchWithNotificationName: before in order to initiate a batch request object.
 */
- (void)executeBatch;




#pragma mark - AdditionalEquipmentServiceSet methods

/**
 Load the service entity-set AdditionalEquipmentServiceSet items, parsed into AdditionalEquipmentService objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadAdditionalEquipmentServiceSetCompletedNotification for operation completion, along with the array of AdditionalEquipmentService items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadAdditionalEquipmentServiceSet;

/**
 Load a specific AdditionalEquipmentService item, parsed into AdditionalEquipmentService object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key), and the response AdditionalEquipmentService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to load.
 */
- (void)loadAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;
/**
 Load a specific AdditionalEquipmentService item, parsed into AdditionalEquipmentService object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key), and the response AdditionalEquipmentService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to load.
 @param expand Should load the specific item with all its related items (using $expand query parameter)
 */
- (void)loadAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService expand:(BOOL)expand;

/**
 Load the EXPT_EKPLISTSet navigation items for a specific AdditionalEquipmentService item, parsed into EXPT_EKPLIST objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_EKPLISTSetForAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key), and the array of the EXPT_EKPLIST items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to load its EXPT_EKPLISTSet navigation items.
 */
- (void)loadEXPT_EKPLISTSetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Load the EXPT_SIGORTASet navigation items for a specific AdditionalEquipmentService item, parsed into EXPT_SIGORTA objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_SIGORTASetForAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key), and the array of the EXPT_SIGORTA items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to load its EXPT_SIGORTASet navigation items.
 */
- (void)loadEXPT_SIGORTASetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Load the EXPT_HIZMETSet navigation items for a specific AdditionalEquipmentService item, parsed into EXPT_HIZMET objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_HIZMETSetForAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key), and the array of the EXPT_HIZMET items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to load its EXPT_HIZMETSet navigation items.
 */
- (void)loadEXPT_HIZMETSetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Load the EXPT_HASARSet navigation items for a specific AdditionalEquipmentService item, parsed into EXPT_HASAR objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_HASARSetForAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key), and the array of the EXPT_HASAR items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to load its EXPT_HASARSet navigation items.
 */
- (void)loadEXPT_HASARSetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Load the EXPT_EKSURUCUSet navigation items for a specific AdditionalEquipmentService item, parsed into EXPT_EKSURUCU objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_EKSURUCUSetForAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key), and the array of the EXPT_EKSURUCU items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to load its EXPT_EKSURUCUSet navigation items.
 */
- (void)loadEXPT_EKSURUCUSetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Creates a AdditionalEquipmentService item and add it to the AdditionalEquipmentServiceSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key), and the response AdditionalEquipmentService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to create.
 */
- (void)createAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Creates a EXPT_EKPLIST item for a AdditionalEquipmentService item (using EXPT_EKPLISTSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_EKPLISTCompletedNotification for operation completion, along with the EXPT_EKPLIST item given as parameter (for kResponseParentItem key), and the response EXPT_EKPLIST item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewEXPT_EKPLIST The specific item to create.
 @param aAdditionalEquipmentService The item which the created item will be associated to.
 */
- (void)createEXPT_EKPLIST:(EXPT_EKPLIST *)aNewEXPT_EKPLIST forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Creates a EXPT_SIGORTA item for a AdditionalEquipmentService item (using EXPT_SIGORTASet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_SIGORTACompletedNotification for operation completion, along with the EXPT_SIGORTA item given as parameter (for kResponseParentItem key), and the response EXPT_SIGORTA item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewEXPT_SIGORTA The specific item to create.
 @param aAdditionalEquipmentService The item which the created item will be associated to.
 */
- (void)createEXPT_SIGORTA:(EXPT_SIGORTA *)aNewEXPT_SIGORTA forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Creates a EXPT_HIZMET item for a AdditionalEquipmentService item (using EXPT_HIZMETSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_HIZMETCompletedNotification for operation completion, along with the EXPT_HIZMET item given as parameter (for kResponseParentItem key), and the response EXPT_HIZMET item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewEXPT_HIZMET The specific item to create.
 @param aAdditionalEquipmentService The item which the created item will be associated to.
 */
- (void)createEXPT_HIZMET:(EXPT_HIZMET *)aNewEXPT_HIZMET forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Creates a EXPT_HASAR item for a AdditionalEquipmentService item (using EXPT_HASARSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_HASARCompletedNotification for operation completion, along with the EXPT_HASAR item given as parameter (for kResponseParentItem key), and the response EXPT_HASAR item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewEXPT_HASAR The specific item to create.
 @param aAdditionalEquipmentService The item which the created item will be associated to.
 */
- (void)createEXPT_HASAR:(EXPT_HASAR *)aNewEXPT_HASAR forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Creates a EXPT_EKSURUCU item for a AdditionalEquipmentService item (using EXPT_EKSURUCUSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_EKSURUCUCompletedNotification for operation completion, along with the EXPT_EKSURUCU item given as parameter (for kResponseParentItem key), and the response EXPT_EKSURUCU item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewEXPT_EKSURUCU The specific item to create.
 @param aAdditionalEquipmentService The item which the created item will be associated to.
 */
- (void)createEXPT_EKSURUCU:(EXPT_EKSURUCU *)aNewEXPT_EKSURUCU forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Updates a AdditionalEquipmentService item in the AdditionalEquipmentServiceSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key), and the response AdditionalEquipmentService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to update.
 */
- (void)updateAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

/**
 Deletes a specific AdditionalEquipmentService item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteAdditionalEquipmentServiceCompletedNotification for operation completion, along with the AdditionalEquipmentService item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aAdditionalEquipmentService The specific item to delete.
 */
- (void)deleteAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService;

#pragma mark - EXPT_EKPLISTSet methods

/**
 Load the service entity-set EXPT_EKPLISTSet items, parsed into EXPT_EKPLIST objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_EKPLISTSetCompletedNotification for operation completion, along with the array of EXPT_EKPLIST items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadEXPT_EKPLISTSet;

/**
 Load a specific EXPT_EKPLIST item, parsed into EXPT_EKPLIST object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_EKPLISTCompletedNotification for operation completion, along with the EXPT_EKPLIST item given as parameter (for kResponseParentItem key), and the response EXPT_EKPLIST item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_EKPLIST The specific item to load.
 */
- (void)loadEXPT_EKPLIST:(EXPT_EKPLIST *)aEXPT_EKPLIST;

/**
 Creates a EXPT_EKPLIST item and add it to the EXPT_EKPLISTSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_EKPLISTCompletedNotification for operation completion, along with the EXPT_EKPLIST item given as parameter (for kResponseParentItem key), and the response EXPT_EKPLIST item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_EKPLIST The specific item to create.
 */
- (void)createEXPT_EKPLIST:(EXPT_EKPLIST *)aEXPT_EKPLIST;

/**
 Updates a EXPT_EKPLIST item in the EXPT_EKPLISTSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateEXPT_EKPLISTCompletedNotification for operation completion, along with the EXPT_EKPLIST item given as parameter (for kResponseParentItem key), and the response EXPT_EKPLIST item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_EKPLIST The specific item to update.
 */
- (void)updateEXPT_EKPLIST:(EXPT_EKPLIST *)aEXPT_EKPLIST;

/**
 Deletes a specific EXPT_EKPLIST item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteEXPT_EKPLISTCompletedNotification for operation completion, along with the EXPT_EKPLIST item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_EKPLIST The specific item to delete.
 */
- (void)deleteEXPT_EKPLIST:(EXPT_EKPLIST *)aEXPT_EKPLIST;

#pragma mark - EXPT_EKSURUCUSet methods

/**
 Load the service entity-set EXPT_EKSURUCUSet items, parsed into EXPT_EKSURUCU objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_EKSURUCUSetCompletedNotification for operation completion, along with the array of EXPT_EKSURUCU items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadEXPT_EKSURUCUSet;

/**
 Load a specific EXPT_EKSURUCU item, parsed into EXPT_EKSURUCU object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_EKSURUCUCompletedNotification for operation completion, along with the EXPT_EKSURUCU item given as parameter (for kResponseParentItem key), and the response EXPT_EKSURUCU item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_EKSURUCU The specific item to load.
 */
- (void)loadEXPT_EKSURUCU:(EXPT_EKSURUCU *)aEXPT_EKSURUCU;

/**
 Creates a EXPT_EKSURUCU item and add it to the EXPT_EKSURUCUSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_EKSURUCUCompletedNotification for operation completion, along with the EXPT_EKSURUCU item given as parameter (for kResponseParentItem key), and the response EXPT_EKSURUCU item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_EKSURUCU The specific item to create.
 */
- (void)createEXPT_EKSURUCU:(EXPT_EKSURUCU *)aEXPT_EKSURUCU;

/**
 Updates a EXPT_EKSURUCU item in the EXPT_EKSURUCUSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateEXPT_EKSURUCUCompletedNotification for operation completion, along with the EXPT_EKSURUCU item given as parameter (for kResponseParentItem key), and the response EXPT_EKSURUCU item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_EKSURUCU The specific item to update.
 */
- (void)updateEXPT_EKSURUCU:(EXPT_EKSURUCU *)aEXPT_EKSURUCU;

/**
 Deletes a specific EXPT_EKSURUCU item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteEXPT_EKSURUCUCompletedNotification for operation completion, along with the EXPT_EKSURUCU item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_EKSURUCU The specific item to delete.
 */
- (void)deleteEXPT_EKSURUCU:(EXPT_EKSURUCU *)aEXPT_EKSURUCU;

#pragma mark - EXPT_HASARSet methods

/**
 Load the service entity-set EXPT_HASARSet items, parsed into EXPT_HASAR objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_HASARSetCompletedNotification for operation completion, along with the array of EXPT_HASAR items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadEXPT_HASARSet;

/**
 Load a specific EXPT_HASAR item, parsed into EXPT_HASAR object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_HASARCompletedNotification for operation completion, along with the EXPT_HASAR item given as parameter (for kResponseParentItem key), and the response EXPT_HASAR item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_HASAR The specific item to load.
 */
- (void)loadEXPT_HASAR:(EXPT_HASAR *)aEXPT_HASAR;

/**
 Creates a EXPT_HASAR item and add it to the EXPT_HASARSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_HASARCompletedNotification for operation completion, along with the EXPT_HASAR item given as parameter (for kResponseParentItem key), and the response EXPT_HASAR item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_HASAR The specific item to create.
 */
- (void)createEXPT_HASAR:(EXPT_HASAR *)aEXPT_HASAR;

/**
 Updates a EXPT_HASAR item in the EXPT_HASARSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateEXPT_HASARCompletedNotification for operation completion, along with the EXPT_HASAR item given as parameter (for kResponseParentItem key), and the response EXPT_HASAR item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_HASAR The specific item to update.
 */
- (void)updateEXPT_HASAR:(EXPT_HASAR *)aEXPT_HASAR;

/**
 Deletes a specific EXPT_HASAR item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteEXPT_HASARCompletedNotification for operation completion, along with the EXPT_HASAR item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_HASAR The specific item to delete.
 */
- (void)deleteEXPT_HASAR:(EXPT_HASAR *)aEXPT_HASAR;

#pragma mark - EXPT_HIZMETSet methods

/**
 Load the service entity-set EXPT_HIZMETSet items, parsed into EXPT_HIZMET objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_HIZMETSetCompletedNotification for operation completion, along with the array of EXPT_HIZMET items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadEXPT_HIZMETSet;

/**
 Load a specific EXPT_HIZMET item, parsed into EXPT_HIZMET object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_HIZMETCompletedNotification for operation completion, along with the EXPT_HIZMET item given as parameter (for kResponseParentItem key), and the response EXPT_HIZMET item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_HIZMET The specific item to load.
 */
- (void)loadEXPT_HIZMET:(EXPT_HIZMET *)aEXPT_HIZMET;

/**
 Creates a EXPT_HIZMET item and add it to the EXPT_HIZMETSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_HIZMETCompletedNotification for operation completion, along with the EXPT_HIZMET item given as parameter (for kResponseParentItem key), and the response EXPT_HIZMET item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_HIZMET The specific item to create.
 */
- (void)createEXPT_HIZMET:(EXPT_HIZMET *)aEXPT_HIZMET;

/**
 Updates a EXPT_HIZMET item in the EXPT_HIZMETSet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateEXPT_HIZMETCompletedNotification for operation completion, along with the EXPT_HIZMET item given as parameter (for kResponseParentItem key), and the response EXPT_HIZMET item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_HIZMET The specific item to update.
 */
- (void)updateEXPT_HIZMET:(EXPT_HIZMET *)aEXPT_HIZMET;

/**
 Deletes a specific EXPT_HIZMET item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteEXPT_HIZMETCompletedNotification for operation completion, along with the EXPT_HIZMET item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_HIZMET The specific item to delete.
 */
- (void)deleteEXPT_HIZMET:(EXPT_HIZMET *)aEXPT_HIZMET;

#pragma mark - EXPT_SIGORTASet methods

/**
 Load the service entity-set EXPT_SIGORTASet items, parsed into EXPT_SIGORTA objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_SIGORTASetCompletedNotification for operation completion, along with the array of EXPT_SIGORTA items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadEXPT_SIGORTASet;

/**
 Load a specific EXPT_SIGORTA item, parsed into EXPT_SIGORTA object. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadEXPT_SIGORTACompletedNotification for operation completion, along with the EXPT_SIGORTA item given as parameter (for kResponseParentItem key), and the response EXPT_SIGORTA item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_SIGORTA The specific item to load.
 */
- (void)loadEXPT_SIGORTA:(EXPT_SIGORTA *)aEXPT_SIGORTA;

/**
 Creates a EXPT_SIGORTA item and add it to the EXPT_SIGORTASet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateEXPT_SIGORTACompletedNotification for operation completion, along with the EXPT_SIGORTA item given as parameter (for kResponseParentItem key), and the response EXPT_SIGORTA item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_SIGORTA The specific item to create.
 */
- (void)createEXPT_SIGORTA:(EXPT_SIGORTA *)aEXPT_SIGORTA;

/**
 Updates a EXPT_SIGORTA item in the EXPT_SIGORTASet.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateEXPT_SIGORTACompletedNotification for operation completion, along with the EXPT_SIGORTA item given as parameter (for kResponseParentItem key), and the response EXPT_SIGORTA item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_SIGORTA The specific item to update.
 */
- (void)updateEXPT_SIGORTA:(EXPT_SIGORTA *)aEXPT_SIGORTA;

/**
 Deletes a specific EXPT_SIGORTA item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteEXPT_SIGORTACompletedNotification for operation completion, along with the EXPT_SIGORTA item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aEXPT_SIGORTA The specific item to delete.
 */
- (void)deleteEXPT_SIGORTA:(EXPT_SIGORTA *)aEXPT_SIGORTA;

#pragma mark - Function Import methods



@end
