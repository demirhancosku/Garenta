/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
 
 File: ZGARENTA_OFIS_SRVRequestHandler.m
 Abstract: A singleton class responsible for sending the appropriate service requests (for retrieving and modifying service data) and parsing the responses into semantic objects, using the ZGARENTA_OFIS_SRV service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.  
 
*/
 
#import "ZGARENTA_OFIS_SRVRequestHandler.h"
#import "RequestBuilder.h"
#import "Request.h"
#import "Logger.h"
#import "ErrorHandling.h"
#import "ConnectivitySettings.h"
#import "UsernamePasswordAuthenticator.h"
#import "PortalAuthenticator.h"
#import "CertificateAuthenticator.h"
#import "FormsBasedSAMLAuthenticator.h"
#import "KeychainHelper.h"
#import "SUPHelper.h"
#import "ServiceErrorXmlParser.h"
#import "ServiceErrorJsonParser.h"

#pragma mark - Notifications

NSString * const kResponseItem = @"item";
NSString * const kResponseItems = @"items";
NSString * const kResponseData = @"data";
NSString * const kRequestedMediaLink = @"mediaLink";
NSString * const kServerResponseError = @"serverError";
NSString * const kParsingError = @"parsingError";
NSString * const kResponseParentItem = @"parent";
NSString * const kBatchRequest = @"BatchRequest";

// Notification keys:
NSString * const kAuthenticationNeededNotification = @"AuthenticationNeeded";
NSString * const kBatchCompletedNotification = @"BatchCompletedNotification";

static NSString * const kRequestUserInfoCompletedNotification = @"requestCompletedNotificaiton";




NSString * const kLoadEXPT_CALISMA_ZAMANISetCompletedNotification = @"LoadEXPT_CALISMA_ZAMANISetCompleted";
NSString * const kLoadEXPT_CALISMA_ZAMANICompletedNotification = @"LoadEXPT_CALISMA_ZAMANICompleted";
NSString * const kCreateEXPT_CALISMA_ZAMANICompletedNotification = @"CreateEXPT_CALISMA_ZAMANICompleted";
NSString * const kUpdateEXPT_CALISMA_ZAMANICompletedNotification = @"UpdateEXPT_CALISMA_ZAMANICompleted";
NSString * const kDeleteEXPT_CALISMA_ZAMANICompletedNotification = @"DeleteEXPT_CALISMA_ZAMANICompleted";

NSString * const kLoadEXPT_SUBE_BILGILERISetCompletedNotification = @"LoadEXPT_SUBE_BILGILERISetCompleted";
NSString * const kLoadEXPT_SUBE_BILGILERICompletedNotification = @"LoadEXPT_SUBE_BILGILERICompleted";
NSString * const kCreateEXPT_SUBE_BILGILERICompletedNotification = @"CreateEXPT_SUBE_BILGILERICompleted";
NSString * const kUpdateEXPT_SUBE_BILGILERICompletedNotification = @"UpdateEXPT_SUBE_BILGILERICompleted";
NSString * const kDeleteEXPT_SUBE_BILGILERICompletedNotification = @"DeleteEXPT_SUBE_BILGILERICompleted";

NSString * const kLoadEXPT_TATIL_ZAMANISetCompletedNotification = @"LoadEXPT_TATIL_ZAMANISetCompleted";
NSString * const kLoadEXPT_TATIL_ZAMANICompletedNotification = @"LoadEXPT_TATIL_ZAMANICompleted";
NSString * const kCreateEXPT_TATIL_ZAMANICompletedNotification = @"CreateEXPT_TATIL_ZAMANICompleted";
NSString * const kUpdateEXPT_TATIL_ZAMANICompletedNotification = @"UpdateEXPT_TATIL_ZAMANICompleted";
NSString * const kDeleteEXPT_TATIL_ZAMANICompletedNotification = @"DeleteEXPT_TATIL_ZAMANICompleted";

NSString * const kLoadOfficeServiceSetCompletedNotification = @"LoadOfficeServiceSetCompleted";
NSString * const kLoadOfficeServiceCompletedNotification = @"LoadOfficeServiceCompleted";
NSString * const kLoadEXPT_TATIL_ZAMANISetForOfficeServiceCompletedNotification = @"LoadEXPT_TATIL_ZAMANISetForOfficeServiceCompleted";
NSString * const kLoadEXPT_SUBE_BILGILERISetForOfficeServiceCompletedNotification = @"LoadEXPT_SUBE_BILGILERISetForOfficeServiceCompleted";
NSString * const kLoadEXPT_CALISMA_ZAMANISetForOfficeServiceCompletedNotification = @"LoadEXPT_CALISMA_ZAMANISetForOfficeServiceCompleted";
NSString * const kCreateOfficeServiceCompletedNotification = @"CreateOfficeServiceCompleted";
NSString * const kUpdateOfficeServiceCompletedNotification = @"UpdateOfficeServiceCompleted";
NSString * const kDeleteOfficeServiceCompletedNotification = @"DeleteOfficeServiceCompleted";







#pragma mark -

// Service Negotiation constants (used for the service negotiation process):
static NSString * const CatalogServiceUrl = @"/sap/opu/odata/iwfnd/CatalogService/";
static NSString * const TechnicalServiceName = @"";
static NSInteger const TechnicalServiceVersionMin = 0;
static NSInteger const TechnicalServiceVersionMax = 0;

@implementation ZGARENTA_OFIS_SRVRequestHandler

#pragma mark - Initialization

- (id)init
{
    self = [super init];
    if (self) { 
        service = [[ZGARENTA_OFIS_SRVService alloc] init]; // This will be re-initiated with the updated metadata from the server (according to the user locale), in first login. See executeLoginWithUsername:andPassword:error method implementation.
		
        connectivityHelper = [[SDMConnectivityHelper alloc] init];
        connectivityHelper.delegate = self;
        
        self.useServiceNegotiation = YES; // Can be later set to 'NO' to disable service negotiation
        
        deviceLanguage = [NSLocale preferredLanguages][0]; // Language ISO 639 code (2 letters)
    }
    return self;
}

#pragma mark - Singleton

+ (ZGARENTA_OFIS_SRVRequestHandler *)uniqueInstance
{
    static ZGARENTA_OFIS_SRVRequestHandler *instance;
	
    @synchronized(self) {
        if (!instance) {
            instance = [[ZGARENTA_OFIS_SRVRequestHandler alloc] init];
        }
        return instance;
    }
}

#pragma mark - User Login

- (NSData *)executeServiceDocumentRequestAndReturnError:(NSError * __autoreleasing *)error
{
    id<Requesting> serviceDocumentRequest = [connectivityHelper executeBasicSyncRequestWithQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:self.serviceDocumentURL]]];
    
    if ((!serviceDocumentRequest.error) && (serviceDocumentRequest.responseStatusCode == 200) && serviceDocumentRequest.responseData) {
        //Authentication succeeded
        return serviceDocumentRequest.responseData;
    }
    else {
        //Authentication failed
        NSString *errorMessage = NSLocalizedString(@"Login failed.", @"Login failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:LOGIN_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(@"Error getting service document. Login failed.");
        return nil;
    }
}

- (NSData *)executeServiceMetadataRequestAndReturnError:(NSError * __autoreleasing *)error
{
    NSString *serviceMetadataUrl = [NSString stringWithFormat:@"%@/$metadata",self.serviceDocumentURL];
    id<Requesting> serviceMetadataRequest = [connectivityHelper executeBasicSyncRequestWithQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:serviceMetadataUrl]]];
    
    if ((!serviceMetadataRequest.error) && (serviceMetadataRequest.responseStatusCode == 200) && serviceMetadataRequest.responseData) {
        //Authentication succeeded
        return serviceMetadataRequest.responseData;
    }
    else {
        //Authentication failed
        NSString *errorMessage = NSLocalizedString(@"Login failed.", @"Login failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:LOGIN_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(@"Error getting service metadata. Login failed");
        return nil;
    }
}

- (id <Authenticating>)activateCertificateAuthentication
{
    CertificateAuthenticator *authenticator = [[CertificateAuthenticator alloc] init];
    // The initialized certificate authenticator takes the certificate from the Keychain and exposes it using the following property
    certificate = authenticator.certificate;
    return authenticator;
}

- (id <Authenticating>)activatePortalAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    return [[PortalAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
}

- (id <Authenticating>)activateUsernamePasswordAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    return [[UsernamePasswordAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
}

- (id <Authenticating>)activateFormsBasedSAMLAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    return [[FormsBasedSAMLAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
}

// Initiate the appropriate authenticating implementation according to the Authentication Type configured in the ConnectivitySettings.
- (id <Authenticating>)activateAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    id <Authenticating> authenticator;
    // in case in SUP mode, authentication type is defined between SUP Server and Gateway, so we need a simple UsernamePasswordAuthenticator
    if([ConnectivitySettings isSUPMode]) {
        return [[UsernamePasswordAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
    }
    else if ([ConnectivitySettings isGWAASMode]) {
        // in case in GWaaS mode, authentication type is defined on the IDP, so we need the FormsBasedSAMLAuthenticator
        return [self activateFormsBasedSAMLAuthenticationWithUsername:aUsername andPassword:aPassword];
    }
    else {
        // in this case we don't use SUP server or GWaaS so we need to define the correct authenticator
        if ([ConnectivitySettings authenticationType] == UsernamePasswordAuthenticationType) {
            authenticator =  [self activateUsernamePasswordAuthenticationWithUsername:aUsername andPassword:aPassword];
        }
        else if ([ConnectivitySettings authenticationType] == PortalAuthenticationType) {
           authenticator =  [self activatePortalAuthenticationWithUsername:aUsername andPassword:aPassword];
        }
        else if ([ConnectivitySettings authenticationType] == CertificateAuthenticationType) {
            authenticator = [self activateCertificateAuthentication];
        }
        else if ([ConnectivitySettings authenticationType] == FormsBasedSAMLAuthenticationType) {
            authenticator = [self activateFormsBasedSAMLAuthenticationWithUsername:aUsername andPassword:aPassword];
        }
    }
    // Set SAP client:
    authenticator.sapClient = self.client; 
    
    return authenticator;
}

- (BOOL)isServiceDocumentURLValidAndReturnError:(NSError * __autoreleasing *)error
{
    if ([self.serviceDocumentURL length] == 0) {
        NSString *errorMessage = NSLocalizedString(@"Service URL is empty.", @"Service URL is empty.");
        if([ConnectivitySettings isSUPMode]) {
            errorMessage = NSLocalizedString(@"Application End Point URL returned from SUP server is empty.", @"Application End Point URL returned from SUP server is empty."); 
        }
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_URL_EMPTY_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(errorMessage);
        return NO;
    }
    return YES;
}

- (BOOL)setURLAndClientWithSUPApplicationEndPointAndReturnError:(NSError * __autoreleasing *)error
{
    NSString *endPointURL = nil;
    if ([KeychainHelper isCredentialsSaved]){
        CredentialsData *credentials = [KeychainHelper loadCredentialsAndReturnError:error];
        if (credentials) {
            endPointURL = [SUPHelper getSUPApplicationEndPointWithCredentials:credentials error:error];
        }
    }
    
    if ([endPointURL length] == 0) {
        self.serviceDocumentURL = nil;
        self.client = nil;
        NSString *errorMessage = NSLocalizedString(@"Login failed.", @"Login failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:LOGIN_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        NSString *errorLogMessage = [NSString stringWithFormat:@"Error getting Application End Point URL from SUP server. Login failed. %@.",[*error localizedDescription]];
        LOGERROR(errorLogMessage);
        return NO;
    }
    
    // Extract Base URL and SAP Client from application end point URL:
    
    NSRange range = [endPointURL rangeOfString:@"?"];
    
    if (range.location != NSNotFound) {

        self.serviceDocumentURL = [endPointURL substringToIndex:range.location]; // URL without parameters
        
        // Extract SAP Client parameter:
        NSString *parameters = [endPointURL substringFromIndex:(range.location + range.length)];
        range = [parameters rangeOfString:@"sap-client="];
        NSString *clientValue = nil;
        if (range.location != NSNotFound) {
            
           clientValue = [parameters substringFromIndex:(range.location + range.length)];
            
            // Remove what's after & or / charachters (if exist) from client value
            NSRange range = [clientValue rangeOfString:@"&"];
            if (range.location == NSNotFound) {
               range = [clientValue rangeOfString:@"/"];        
            }
            if (range.location != NSNotFound) {
                clientValue = [clientValue substringToIndex:range.location];
            }
        }
        
        self.client = clientValue;
    }
    else {
        self.serviceDocumentURL = endPointURL;
        self.client = nil;
    }
    
    return YES;
}

- (BOOL)executeLoginWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword error:(NSError *__autoreleasing *)error
{
    // In case local metadata is used to initiate the service proxy, validate the service before continue with authentication flow
    if (self.useLocalMetadata && ![self isServiceValid]) {
        NSString *errorMessage = NSLocalizedString(@"Service metadata is invalid. Please contact your administrator.", @"Service metadata is invalid. Please contact your administrator.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_METADATA_PARSE_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(errorMessage);
        return NO;
    }
    
    // Activate required authentication type (and set SAP client):
    id <Authenticating> authenticator = [self activateAuthenticationWithUsername:aUsername andPassword:aPassword];
    
    if ([ConnectivitySettings isSUPMode]) {
        // Get application end point from SUP server and use it as a base for the application requests.
        BOOL applicationEndPointReceived = [self setURLAndClientWithSUPApplicationEndPointAndReturnError:error];
        authenticator.sapClient = self.client;
        if (!applicationEndPointReceived) {
            return NO;
        }
    }
    
    // Check that the service URL property was set (from App Delegate or from SUP application end point)
    if (![self isServiceDocumentURLValidAndReturnError:error]) {
        return NO;
    }

    // In case local metadata is used, it's enought to call authenticator to validate credentials without parsing the response
    if (self.useLocalMetadata) {
        // Get service document using the authenticator (negotiation is not supported in this scenario):
        NSData *serviceDocumentData = [authenticator authenticateWithODataQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:self.serviceDocumentURL]] error:error];
        
        if (serviceDocumentData) {
            return YES;
        }
        return NO;
    }
    // In case local metadata is not used, negotiate the best matching service version, get the service data, the service metadata, and re-initialize the service proxy object
    else {
        //Negotiate using the authenticator:
        BOOL serviceNegotiationResult = [self negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:authenticator error:error];
        
        NSData *serviceDocumentData = nil;
        if (serviceNegotiationResult) {
            LOGNOTICE(@"Service negotiation succeeded.");
            // Get service document without authentication (rely on session cookie)
            serviceDocumentData = [self executeServiceDocumentRequestAndReturnError:error];
        }
        else {
            // Get service document using the authenticator:
            serviceDocumentData = [authenticator authenticateWithODataQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:self.serviceDocumentURL]] error:error];
        }
        // Get service metadata and use it to init the service proxy object:
        if (serviceDocumentData) {
            NSData *serviceMetadataData = [self executeServiceMetadataRequestAndReturnError:error];
            if (serviceMetadataData) {
                service = [[ZGARENTA_OFIS_SRVService alloc] initWithServiceDocument:serviceDocumentData andMedatadata:serviceMetadataData];
                [service setServiceDocumentUrl:self.serviceDocumentURL];
                if ([self isServiceValid]) {
                    return YES;
                }
                else {
                    NSString *errorMessage = NSLocalizedString(@"Service metadata is invalid. Please contact your administrator.", @"Service metadata is invalid. Please contact your administrator.");
                    if (error) {
                        *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_METADATA_PARSE_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
                    }
                    LOGERROR(errorMessage);
                    return NO;
                }
            }
        }
        return NO;
    }    
}

- (BOOL)executeLoginWithCertificateWithPassword:(NSString *)aPassword andFileName:(NSString *)aFileName andFileExtension:(NSString *)aFileExtension error:(NSError *__autoreleasing *)error
{
    if ([ConnectivitySettings isSUPMode]) {
        NSString *thePath = [[NSBundle mainBundle]
                             pathForResource:aFileName ofType:aFileExtension];
        if ([thePath length] > 0) {
	        CredentialsData *credentialsData = nil;
            @try {
                credentialsData = [SUPHelper getCredentialsFromCertificateFile:thePath withCertificatePassword:aPassword error:error];
            }
            @catch (NSException* e) {
                NSString *logError = [e description];
                LOGERROR(logError);
            }
	        if (!credentialsData) {
	        	NSString *errorMessage = NSLocalizedString(@"Failed to get certificate string from file", @"Failed to get certificate string from file");
	        	if (error) {
                    if(*error) {
                        NSString *logMessage = [*error localizedDescription];
                        LOGERROR(logMessage);
                    }
                    else {
                        *error = [NSError errorWithDomain:ERROR_DOMAIN code:CERTIFICATE_HANDLING_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
                        LOGERROR(errorMessage);
                    }
                }
                else {
                    LOGERROR(errorMessage);
                }
                return NO;
            }
	        return [self executeLoginWithUsername:credentialsData.username andPassword:credentialsData.password error:error];
        }
        else {
        	NSString *localizedMessage = NSLocalizedString(@"Failed to extract Identity from certificate. Verify that certificate named %@.%@ exists", @"Failed to extract Identity from certificate. Verify that certificate named %@.%@ exists");
        	NSString *errorMessage = [NSString stringWithFormat:localizedMessage, aFileName, aFileExtension];
        	if(error) {
        		*error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:CERTIFICATE_HANDLING_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        	}
        	LOGERROR(errorMessage);
        	return NO;
        }
    }
    return [self executeLoginWithUsername:nil andPassword:nil error:error];
}

- (BOOL)executeLoginWithCertificateWithError:(NSError *__autoreleasing *)error
{
    return [self executeLoginWithCertificateWithPassword:nil andFileName:nil andFileExtension:nil error:error];
}


#pragma mark - Service Negotitation Methods

- (NSData *)executeServiceNegotiationRequestUsingAuthenticator:(id <Authenticating>)authenticator AndReturnError:(NSError * __autoreleasing *)error
{
	NSData *serviceNegotiationResponse = nil;
    NSError *serviceNegotiationError = nil;
	
    ODataQuery *query = [serviceNegotiator getBestMatchingServiceQuery];
	if (query) {
		serviceNegotiationResponse = [authenticator authenticateWithODataQuery:query error:&serviceNegotiationError];
	}
	else {
		return nil;
	}
    
    if (!serviceNegotiationError) {
		return serviceNegotiationResponse;
    }
    else {
        NSString *errorMessage = NSLocalizedString(@"Service negotiation failed.", @"Service negotiation failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_NEGOTIATION_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(@"Error getting best matching service. Service negotiation failed.");
        return nil;
    }
}

- (BOOL)negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:(id <Authenticating>)authenticator error:(NSError * __autoreleasing *)error
{
	if (!self.useServiceNegotiation) {
		LOGNOTICE(@"Skipping service negotiation process.");
		return NO;
	}
		
	NSString *catalogServiceUrl = CatalogServiceUrl;
    // If in GWaaS mode then set appropriate catalog service url 
    if ([ConnectivitySettings isGWAASMode]) {
        catalogServiceUrl = @"/CATALOGSERVICE/";
    }
    
	// Initialize service negotiation object
	serviceNegotiator = [[ServiceNegotiator alloc] initWithServiceUrl:self.serviceDocumentURL andCatalogRelativeUrl:catalogServiceUrl];
	
	if (!serviceNegotiator) {
		LOGNOTICE(@"ServiceNegotiator was not initialized. Skipping service negotiation process.");
		return NO;
	}
	
	serviceNegotiator.technicalServiceName = TechnicalServiceName;
	serviceNegotiator.technicalServiceVersionMin = TechnicalServiceVersionMin;
	serviceNegotiator.technicalServiceVersionMax = TechnicalServiceVersionMax;
	
	NSData *serviceData = [self executeServiceNegotiationRequestUsingAuthenticator:authenticator AndReturnError:error];
	
	if (serviceData && [serviceNegotiator parseBestMatchingServiceResultWithData:serviceData]) {
		if (serviceNegotiator.bestMatchingServiceUrl && serviceNegotiator.bestMatchingServiceUrl.length > 0) {
			LOGNOTICE(@"Service negotiation process completed successfully. Updating service document URL.");
			self.serviceDocumentURL = serviceNegotiator.bestMatchingServiceUrl;
            // Make sure the service negotiation process runs only once.
            self.useServiceNegotiation = NO;
            return YES;
		}
	}
	return NO;
}

#pragma mark - Batch

- (void)startBatchWithNotificationName:(NSString *)aNotificationName
{
    [self loadCSRFData];
    
    NSDictionary *userInfoDict = nil;
    if ([aNotificationName length] > 0) {
        userInfoDict = @{kBatchCompletedNotification : aNotificationName};
    }
    [connectivityHelper startBatchAsyncWithURL:[[service.serviceDocumentQuery getUrl] absoluteString] andDelegate:self andSelector:@selector(executeBatchCompleted:) andUserInfo:userInfoDict];
}

- (void)closeExistingChangeSet
{
    [connectivityHelper closeExistingChangeSet];
}

- (void)executeBatch
{
    [connectivityHelper executeBatchAsync:csrfData];
}

- (void)executeBatchCompleted:(BatchRequest *)batchRequest
{
    NSArray *requests = [batchRequest requestArray];
    for (int i = 0; i < [requests count]; i++) {
        if ([requests[i] isKindOfClass:[NSArray class]]) {
            for (Request *request in requests[i]) {
                [self performSelectorOnMainThread:request.didFinishSelector withObject:request waitUntilDone:NO];
            }
        }
        else {
            [self performSelectorOnMainThread:((Request *)requests[i]).didFinishSelector withObject:requests[i] waitUntilDone:NO];
        }
    }
    
    NSDictionary *userInfo = batchRequest.userInfo;
    NSString *notificationName = userInfo[kBatchCompletedNotification];
    if ([notificationName length] > 0) {
        NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:userInfo];
        userInfoDict[kBatchRequest] = batchRequest;
        [[NSNotificationCenter defaultCenter] postNotificationName:notificationName object:self userInfo:userInfoDict];
    }

}

#pragma mark - Instance methods

- (BOOL)isServiceValid
{
    return (service != nil);
}

- (void)setServiceDocumentURL:(NSString *)serviceDocumentURL
{
    _serviceDocumentURL = serviceDocumentURL;
    
    if ([self.serviceDocumentURL length] > 0) {
        [service setServiceDocumentUrl:self.serviceDocumentURL];
    }
}

- (void)setSAPClient:(NSString *)client
{
    _client = client;
    connectivityHelper.sapClient = self.client;
}

- (void)loadCSRFData
{
    if (!csrfData ) {
        csrfData  = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
}




#pragma mark - EXPT_CALISMA_ZAMANISet methods
#pragma mark Read

- (void)loadEXPT_CALISMA_ZAMANISetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getEXPT_CALISMA_ZAMANISetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_CALISMA_ZAMANISetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_CALISMA_ZAMANISet
{
    ODataQuery *query = service.EXPT_CALISMA_ZAMANISetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadEXPT_CALISMA_ZAMANISetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_CALISMA_ZAMANISetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadEXPT_CALISMA_ZAMANICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    EXPT_CALISMA_ZAMANI *item = [EXPT_CALISMA_ZAMANI parseEXPT_CALISMA_ZAMANIEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_CALISMA_ZAMANICompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_CALISMA_ZAMANI:(EXPT_CALISMA_ZAMANI *)aEXPT_CALISMA_ZAMANI
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_CALISMA_ZAMANI.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_CALISMA_ZAMANI, kRequestUserInfoCompletedNotification : kLoadEXPT_CALISMA_ZAMANICompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_CALISMA_ZAMANICompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createEXPT_CALISMA_ZAMANICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_CALISMA_ZAMANI *item = [EXPT_CALISMA_ZAMANI parseEXPT_CALISMA_ZAMANIEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_CALISMA_ZAMANICompletedNotification object:self userInfo:userInfoDict];

}

- (void)createEXPT_CALISMA_ZAMANI:(EXPT_CALISMA_ZAMANI *)aEXPT_CALISMA_ZAMANI
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aEXPT_CALISMA_ZAMANI error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aEXPT_CALISMA_ZAMANI error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_CALISMA_ZAMANICompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_CALISMA_ZAMANI , kRequestUserInfoCompletedNotification : kCreateEXPT_CALISMA_ZAMANICompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.EXPT_CALISMA_ZAMANISetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_CALISMA_ZAMANICompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateEXPT_CALISMA_ZAMANICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_CALISMA_ZAMANI *item = [EXPT_CALISMA_ZAMANI parseEXPT_CALISMA_ZAMANIEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_CALISMA_ZAMANICompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateEXPT_CALISMA_ZAMANI:(EXPT_CALISMA_ZAMANI *)aEXPT_CALISMA_ZAMANI
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aEXPT_CALISMA_ZAMANI error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aEXPT_CALISMA_ZAMANI error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_CALISMA_ZAMANICompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_CALISMA_ZAMANI.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_CALISMA_ZAMANI , kRequestUserInfoCompletedNotification : kUpdateEXPT_CALISMA_ZAMANICompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateEXPT_CALISMA_ZAMANICompleted:) andUserInfo:userInfoDict andEtag:aEXPT_CALISMA_ZAMANI.etag];
    }
}

#pragma mark Delete

- (void)deleteEXPT_CALISMA_ZAMANICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteEXPT_CALISMA_ZAMANICompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteEXPT_CALISMA_ZAMANI:(EXPT_CALISMA_ZAMANI *)aEXPT_CALISMA_ZAMANI 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_CALISMA_ZAMANI.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_CALISMA_ZAMANI , kRequestUserInfoCompletedNotification : kDeleteEXPT_CALISMA_ZAMANICompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteEXPT_CALISMA_ZAMANICompleted:) andUserInfo:userInfoDict andEtag:aEXPT_CALISMA_ZAMANI.etag];
}

#pragma mark - EXPT_SUBE_BILGILERISet methods
#pragma mark Read

- (void)loadEXPT_SUBE_BILGILERISetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getEXPT_SUBE_BILGILERISetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_SUBE_BILGILERISetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_SUBE_BILGILERISet
{
    ODataQuery *query = service.EXPT_SUBE_BILGILERISetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadEXPT_SUBE_BILGILERISetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_SUBE_BILGILERISetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadEXPT_SUBE_BILGILERICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    EXPT_SUBE_BILGILERI *item = [EXPT_SUBE_BILGILERI parseEXPT_SUBE_BILGILERIEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_SUBE_BILGILERICompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_SUBE_BILGILERI:(EXPT_SUBE_BILGILERI *)aEXPT_SUBE_BILGILERI
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_SUBE_BILGILERI.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_SUBE_BILGILERI, kRequestUserInfoCompletedNotification : kLoadEXPT_SUBE_BILGILERICompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_SUBE_BILGILERICompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createEXPT_SUBE_BILGILERICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_SUBE_BILGILERI *item = [EXPT_SUBE_BILGILERI parseEXPT_SUBE_BILGILERIEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_SUBE_BILGILERICompletedNotification object:self userInfo:userInfoDict];

}

- (void)createEXPT_SUBE_BILGILERI:(EXPT_SUBE_BILGILERI *)aEXPT_SUBE_BILGILERI
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aEXPT_SUBE_BILGILERI error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aEXPT_SUBE_BILGILERI error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_SUBE_BILGILERICompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_SUBE_BILGILERI , kRequestUserInfoCompletedNotification : kCreateEXPT_SUBE_BILGILERICompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.EXPT_SUBE_BILGILERISetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_SUBE_BILGILERICompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateEXPT_SUBE_BILGILERICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_SUBE_BILGILERI *item = [EXPT_SUBE_BILGILERI parseEXPT_SUBE_BILGILERIEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_SUBE_BILGILERICompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateEXPT_SUBE_BILGILERI:(EXPT_SUBE_BILGILERI *)aEXPT_SUBE_BILGILERI
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aEXPT_SUBE_BILGILERI error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aEXPT_SUBE_BILGILERI error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_SUBE_BILGILERICompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_SUBE_BILGILERI.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_SUBE_BILGILERI , kRequestUserInfoCompletedNotification : kUpdateEXPT_SUBE_BILGILERICompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateEXPT_SUBE_BILGILERICompleted:) andUserInfo:userInfoDict andEtag:aEXPT_SUBE_BILGILERI.etag];
    }
}

#pragma mark Delete

- (void)deleteEXPT_SUBE_BILGILERICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteEXPT_SUBE_BILGILERICompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteEXPT_SUBE_BILGILERI:(EXPT_SUBE_BILGILERI *)aEXPT_SUBE_BILGILERI 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_SUBE_BILGILERI.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_SUBE_BILGILERI , kRequestUserInfoCompletedNotification : kDeleteEXPT_SUBE_BILGILERICompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteEXPT_SUBE_BILGILERICompleted:) andUserInfo:userInfoDict andEtag:aEXPT_SUBE_BILGILERI.etag];
}

#pragma mark - EXPT_TATIL_ZAMANISet methods
#pragma mark Read

- (void)loadEXPT_TATIL_ZAMANISetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getEXPT_TATIL_ZAMANISetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_TATIL_ZAMANISetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_TATIL_ZAMANISet
{
    ODataQuery *query = service.EXPT_TATIL_ZAMANISetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadEXPT_TATIL_ZAMANISetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_TATIL_ZAMANISetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadEXPT_TATIL_ZAMANICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    EXPT_TATIL_ZAMANI *item = [EXPT_TATIL_ZAMANI parseEXPT_TATIL_ZAMANIEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_TATIL_ZAMANICompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_TATIL_ZAMANI:(EXPT_TATIL_ZAMANI *)aEXPT_TATIL_ZAMANI
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_TATIL_ZAMANI.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_TATIL_ZAMANI, kRequestUserInfoCompletedNotification : kLoadEXPT_TATIL_ZAMANICompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_TATIL_ZAMANICompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createEXPT_TATIL_ZAMANICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_TATIL_ZAMANI *item = [EXPT_TATIL_ZAMANI parseEXPT_TATIL_ZAMANIEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_TATIL_ZAMANICompletedNotification object:self userInfo:userInfoDict];

}

- (void)createEXPT_TATIL_ZAMANI:(EXPT_TATIL_ZAMANI *)aEXPT_TATIL_ZAMANI
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aEXPT_TATIL_ZAMANI error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aEXPT_TATIL_ZAMANI error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_TATIL_ZAMANICompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_TATIL_ZAMANI , kRequestUserInfoCompletedNotification : kCreateEXPT_TATIL_ZAMANICompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.EXPT_TATIL_ZAMANISetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_TATIL_ZAMANICompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateEXPT_TATIL_ZAMANICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_TATIL_ZAMANI *item = [EXPT_TATIL_ZAMANI parseEXPT_TATIL_ZAMANIEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_TATIL_ZAMANICompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateEXPT_TATIL_ZAMANI:(EXPT_TATIL_ZAMANI *)aEXPT_TATIL_ZAMANI
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aEXPT_TATIL_ZAMANI error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aEXPT_TATIL_ZAMANI error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_TATIL_ZAMANICompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_TATIL_ZAMANI.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_TATIL_ZAMANI , kRequestUserInfoCompletedNotification : kUpdateEXPT_TATIL_ZAMANICompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateEXPT_TATIL_ZAMANICompleted:) andUserInfo:userInfoDict andEtag:aEXPT_TATIL_ZAMANI.etag];
    }
}

#pragma mark Delete

- (void)deleteEXPT_TATIL_ZAMANICompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteEXPT_TATIL_ZAMANICompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteEXPT_TATIL_ZAMANI:(EXPT_TATIL_ZAMANI *)aEXPT_TATIL_ZAMANI 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_TATIL_ZAMANI.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_TATIL_ZAMANI , kRequestUserInfoCompletedNotification : kDeleteEXPT_TATIL_ZAMANICompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteEXPT_TATIL_ZAMANICompleted:) andUserInfo:userInfoDict andEtag:aEXPT_TATIL_ZAMANI.etag];
}

#pragma mark - OfficeServiceSet methods
#pragma mark Read

- (void)loadOfficeServiceSetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getOfficeServiceSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadOfficeServiceSetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadOfficeServiceSet
{
    ODataQuery *query = service.OfficeServiceSetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadOfficeServiceSetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadOfficeServiceSetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadOfficeServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    OfficeService *item = [OfficeService parseExpandedOfficeServiceEntryWithData:request.responseData andServiceDocument:service.sdmServiceDocument error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadOfficeServiceCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadOfficeService:(OfficeService *)aOfficeService
{
    [self loadOfficeService:aOfficeService expand:NO];
}

- (void)loadOfficeService:(OfficeService *)aOfficeService expand:(BOOL)expand
{
//    ODataQuery *query = [service getOfficeServiceSetEntryQueryWithImppMerkezSube:aOfficeService.ImppMerkezSube andImppBolge:aOfficeService.ImppBolge andImppAltSube:aOfficeService.ImppAltSube];
    ODataQuery *query = [service getOfficeServiceSetEntryQueryTypedWithImppMerkezSube:@"" andImppBolge:@"" andImppAltSube:@""];
    if (expand) {
        [query expand:@"EXPT_TATIL_ZAMANISet,EXPT_SUBE_BILGILERISet,EXPT_CALISMA_ZAMANISet"]; 
    }
    NSDictionary *userInfoDict = @{kResponseParentItem : aOfficeService , kRequestUserInfoCompletedNotification : kLoadOfficeServiceCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadOfficeServiceCompleted:) andUserInfo:userInfoDict];
}

- (void)loadEXPT_TATIL_ZAMANISetForOfficeServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    OfficeService *parentOfficeServiceItem = request.userInfo[kResponseParentItem];
    [parentOfficeServiceItem loadEXPT_TATIL_ZAMANISetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentOfficeServiceItem.EXPT_TATIL_ZAMANISet;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_TATIL_ZAMANISetForOfficeServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadEXPT_TATIL_ZAMANISetForOfficeService:(OfficeService *)aOfficeService
{
    ODataQuery *query = aOfficeService.EXPT_TATIL_ZAMANISetQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aOfficeService , kRequestUserInfoCompletedNotification : kLoadEXPT_TATIL_ZAMANISetForOfficeServiceCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_TATIL_ZAMANISetForOfficeServiceCompleted:) andUserInfo:userInfoDict];
}

- (void)loadEXPT_SUBE_BILGILERISetForOfficeServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    OfficeService *parentOfficeServiceItem = request.userInfo[kResponseParentItem];
    [parentOfficeServiceItem loadEXPT_SUBE_BILGILERISetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentOfficeServiceItem.EXPT_SUBE_BILGILERISet;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_SUBE_BILGILERISetForOfficeServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadEXPT_SUBE_BILGILERISetForOfficeService:(OfficeService *)aOfficeService
{
    ODataQuery *query = aOfficeService.EXPT_SUBE_BILGILERISetQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aOfficeService , kRequestUserInfoCompletedNotification : kLoadEXPT_SUBE_BILGILERISetForOfficeServiceCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_SUBE_BILGILERISetForOfficeServiceCompleted:) andUserInfo:userInfoDict];
}

- (void)loadEXPT_CALISMA_ZAMANISetForOfficeServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    OfficeService *parentOfficeServiceItem = request.userInfo[kResponseParentItem];
    [parentOfficeServiceItem loadEXPT_CALISMA_ZAMANISetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentOfficeServiceItem.EXPT_CALISMA_ZAMANISet;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_CALISMA_ZAMANISetForOfficeServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadEXPT_CALISMA_ZAMANISetForOfficeService:(OfficeService *)aOfficeService
{
    ODataQuery *query = aOfficeService.EXPT_CALISMA_ZAMANISetQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aOfficeService , kRequestUserInfoCompletedNotification : kLoadEXPT_CALISMA_ZAMANISetForOfficeServiceCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_CALISMA_ZAMANISetForOfficeServiceCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createOfficeServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        OfficeService *item = [OfficeService parseOfficeServiceEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateOfficeServiceCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createOfficeService:(OfficeService *)aOfficeService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aOfficeService error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aOfficeService error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateOfficeServiceCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aOfficeService , kRequestUserInfoCompletedNotification : kCreateOfficeServiceCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.OfficeServiceSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createOfficeServiceCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createEXPT_TATIL_ZAMANI:(EXPT_TATIL_ZAMANI *)aNewEXPT_TATIL_ZAMANI forOfficeService:(OfficeService *)aOfficeService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aNewEXPT_TATIL_ZAMANI error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aNewEXPT_TATIL_ZAMANI error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_TATIL_ZAMANICompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewEXPT_TATIL_ZAMANI , kRequestUserInfoCompletedNotification : kCreateEXPT_TATIL_ZAMANICompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aOfficeService.EXPT_TATIL_ZAMANISetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_TATIL_ZAMANICompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createEXPT_SUBE_BILGILERI:(EXPT_SUBE_BILGILERI *)aNewEXPT_SUBE_BILGILERI forOfficeService:(OfficeService *)aOfficeService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aNewEXPT_SUBE_BILGILERI error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aNewEXPT_SUBE_BILGILERI error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_SUBE_BILGILERICompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewEXPT_SUBE_BILGILERI , kRequestUserInfoCompletedNotification : kCreateEXPT_SUBE_BILGILERICompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aOfficeService.EXPT_SUBE_BILGILERISetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_SUBE_BILGILERICompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createEXPT_CALISMA_ZAMANI:(EXPT_CALISMA_ZAMANI *)aNewEXPT_CALISMA_ZAMANI forOfficeService:(OfficeService *)aOfficeService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aNewEXPT_CALISMA_ZAMANI error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aNewEXPT_CALISMA_ZAMANI error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_CALISMA_ZAMANICompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewEXPT_CALISMA_ZAMANI , kRequestUserInfoCompletedNotification : kCreateEXPT_CALISMA_ZAMANICompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aOfficeService.EXPT_CALISMA_ZAMANISetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_CALISMA_ZAMANICompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateOfficeServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        OfficeService *item = [OfficeService parseOfficeServiceEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateOfficeServiceCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateOfficeService:(OfficeService *)aOfficeService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aOfficeService error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aOfficeService error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateOfficeServiceCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aOfficeService.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aOfficeService , kRequestUserInfoCompletedNotification : kUpdateOfficeServiceCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateOfficeServiceCompleted:) andUserInfo:userInfoDict andEtag:aOfficeService.etag];
    }
}

#pragma mark Delete

- (void)deleteOfficeServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteOfficeServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteOfficeService:(OfficeService *)aOfficeService 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aOfficeService.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aOfficeService , kRequestUserInfoCompletedNotification : kDeleteOfficeServiceCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteOfficeServiceCompleted:) andUserInfo:userInfoDict andEtag:aOfficeService.etag];
}

#pragma mark - Function Import methods

#pragma mark - RequestDelegate

- (void)requestFailed:(Request *)request
{
    int statusCode = request.responseStatusCode;
    if (statusCode == 401) {
        [self authenticationNeededForRequest:request];
        LOGERROR(@"Request failed with authentication error - response status code 401");
    }
    else {
        NSString *errorMessage;
        NSString *logErrorMessage;
        if (statusCode == 403){
            errorMessage = [request responseString];
            NSString *csrfToken = [request responseHeaders][@"x-csrf-token"];
            if (csrfToken.length > 0 && [csrfToken isEqualToString:@"Required"]) {
            	csrfData = nil;
                NSString *localizedMessage = NSLocalizedString(@"CSRF Token is invalid. Try again to get a new token", @"CSRF Token is invalid. Try again to get a new token");
                errorMessage = [NSString stringWithFormat:@"%@. %@", errorMessage, localizedMessage];
                logErrorMessage = [NSString stringWithFormat:@"Request failed due to invalid CSRF with error: %@. Response status code: %d.", errorMessage, statusCode];
            }
        }
        else {
            errorMessage = request.error ? [request.error localizedDescription] : [request responseStatusMessage];
            logErrorMessage = [NSString stringWithFormat:@"Request failed with error: %@. Response status code: %d.", errorMessage, statusCode];
            
            id<ServiceErrorParsing> serviceErrorParser = nil;
            NSString *contentType = [[[request responseHeaders] objectForKey:@"Content-Type"] lowercaseString];
            if ([contentType isEqualToString:@"application/json"]) {
                serviceErrorParser = [[ServiceErrorJsonParser alloc] initWithErrorData:[request responseData]];
            }
            else {
                serviceErrorParser = [[ServiceErrorXmlParser alloc] initWithErrorData:[request responseData]];
            }
            if ([serviceErrorParser parse]) {
                ServiceError *serviceError = [serviceErrorParser result];
                
                if ([serviceError.innerMessage length] > 0){
                    logErrorMessage = [logErrorMessage stringByAppendingString:[NSString stringWithFormat:@" Service error message: %@ Service error inner message: %@", serviceError.message, serviceError.innerMessage]];
                }
                else{
                    logErrorMessage = [logErrorMessage stringByAppendingString:[NSString stringWithFormat:@" Service response: %@", serviceError.message]];
                }
                
                errorMessage = serviceError.message;
            }
            else
            {
                logErrorMessage = [logErrorMessage stringByAppendingString:[NSString stringWithFormat:@" Response body: %@",[request responseString]]];
            }
        }
        LOGERROR(logErrorMessage);
        
        NSMutableDictionary *errorUserInfoDict = [@{} mutableCopy];
        errorUserInfoDict[NSLocalizedDescriptionKey] = errorMessage;
        NSError *error = [NSError errorWithDomain:ERROR_DOMAIN code:REQUEST_FAILED_ERROR_CODE userInfo:errorUserInfoDict];
        
        NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
        userInfoDict[kServerResponseError] = error;
        
        // Send error notification (handled by all the application views)
        [[NSNotificationCenter defaultCenter] postNotificationName:request.userInfo[kRequestUserInfoCompletedNotification] object:self userInfo:userInfoDict];
    }
}


- (void)authenticationNeededForRequest:(Request *)request
{
    //Cancel request and send notification for displaying the login screen
    [request cancelAuthentication];
    [[NSNotificationCenter defaultCenter] postNotificationName:kAuthenticationNeededNotification object:self userInfo:nil];
}

#pragma mark - SDMConnectivityHelperDelegate

- (void)onBeforeSend:(id <Requesting>)request
{
	request.shouldPresentAuthenticationDialog = YES;
    [request setUsername:[ApplicationProperties getSAPUser]];
    [request setPassword:[ApplicationProperties getSAPPassword]];
    if ([ConnectivitySettings isSUPMode]) {
        if ([KeychainHelper isCredentialsSaved]){
            NSError *error = nil;
            CredentialsData *credentials = [KeychainHelper loadCredentialsAndReturnError:&error];
            if (credentials) {
                
            }
            else if(error) {
                NSString *msg = [error localizedDescription];
                LOGERROR(msg);
            }
            else {
                NSString *msg = NSLocalizedString(@"Error while loading credentials from keychain", @"Error while loading credentials from keychain");
                LOGERROR(msg);
            }
        }
    }
    else if ([ConnectivitySettings authenticationType] == CertificateAuthenticationType) {
        [request setClientCertificateIdentity:certificate];
    }

    //Define the request language as the device language settings. Uncomment the following line to use the user default language as defined on the server.
    [request addRequestHeader:@"sap-language" value:deviceLanguage];
        
    if (self.useJSON) {
        NSString *jsonUrl = [request.url absoluteString];
        // Don't use jSON to fetch metadata or service document
        if ([self isJSONAllowedForUrl:jsonUrl]) {
            [request addRequestHeader:@"Content-Type" value:@"application/json"];
            [request addRequestHeader:@"Accept" value:@"application/json"];
        }
    }
}

- (BOOL)isJSONAllowedForUrl:(NSString *)jsonUrl
{
    if ([jsonUrl rangeOfString:@"$metadata" options:NSCaseInsensitiveSearch].location == NSNotFound) {
        if (![self.serviceDocumentURL isEqualToString:jsonUrl]) {
            return YES;
        }
    }
    
    return NO;
}

@end
