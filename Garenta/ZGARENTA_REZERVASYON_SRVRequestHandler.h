/*
 
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
  
 File: ZGARENTA_REZERVASYON_SRVRequestHandler.h
 Abstract: A singleton class responsible for sending the appropriate service requests (for retrieving and modifying service data) and parsing the responses into semantic objects, using the ZGARENTA_REZERVASYON_SRV service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.
 
 */

#import <Foundation/Foundation.h>
#import "RequestDelegate.h"
#import "SDMConnectivityHelper.h"
#import "ZGARENTA_REZERVASYON_SRVServiceDeclarations.h"
#import "ServiceNegotiator.h"
#import "Authenticating.h"



#pragma mark - Notifications

////Notification UserInfo keys:
//extern NSString * const kResponseItem; ///< Single item response
//extern NSString * const kResponseItems; ///< Multiple items response
//extern NSString * const kResponseData; ///< Raw response data
//extern NSString * const kRequestedMediaLink; ///< Media link item
//extern NSString * const kServerResponseError; ///< Server response error
//extern NSString * const kParsingError; ///< Parsing response error
//extern NSString * const kResponseParentItem; ///< Item selected in the view previous to the one triggered the request
//extern NSString * const kBatchRequest; ///< BatchRequest object containing the response
//
////Notification keys:
//extern NSString * const kAuthenticationNeededNotification; ///< Notification key for request authentication challenge.
//


extern NSString * const kLoadReservationServiceCompletedNotification; ///< Notification key for complete loading of ReservationService items.
extern NSString * const kLoadIT_ARACLARSetForReservationServiceCompletedNotification; ///< Notification key for complete loading of IT_ARACLARSet navigation items for a specific ReservationService item.
extern NSString * const kLoadIT_EKSURUCUSetForReservationServiceCompletedNotification; ///< Notification key for complete loading of IT_EKSURUCUSet navigation items for a specific ReservationService item.
extern NSString * const kLoadIT_ITEMSSetForReservationServiceCompletedNotification; ///< Notification key for complete loading of IT_ITEMSSet navigation items for a specific ReservationService item.
extern NSString * const kLoadIT_FATURA_ADRESSetForReservationServiceCompletedNotification; ///< Notification key for complete loading of IT_FATURA_ADRESSet navigation items for a specific ReservationService item.
extern NSString * const kLoadET_RETURNSetForReservationServiceCompletedNotification; ///< Notification key for complete loading of ET_RETURNSet navigation items for a specific ReservationService item.
extern NSString * const kLoadIT_TAHSILATSetForReservationServiceCompletedNotification; ///< Notification key for complete loading of IT_TAHSILATSet navigation items for a specific ReservationService item.
extern NSString * const kLoadIT_SDREZERVSetForReservationServiceCompletedNotification; ///< Notification key for complete loading of IT_SDREZERVSet navigation items for a specific ReservationService item.
extern NSString * const kCreateReservationServiceCompletedNotification; ///< Notification key for complete creating a ReservationService collection item.
extern NSString * const kUpdateReservationServiceCompletedNotification; ///< Notification key for complete updating a ReservationService collection item.
extern NSString * const kDeleteReservationServiceCompletedNotification; ///< Notification key for complete deleting a ReservationService item.

extern NSString * const kLoadET_KK_RETURNCompletedNotification; ///< Notification key for complete loading of ET_KK_RETURN items.
extern NSString * const kCreateET_KK_RETURNCompletedNotification; ///< Notification key for complete creating a ET_KK_RETURN collection item.
extern NSString * const kUpdateET_KK_RETURNCompletedNotification; ///< Notification key for complete updating a ET_KK_RETURN collection item.
extern NSString * const kDeleteET_KK_RETURNCompletedNotification; ///< Notification key for complete deleting a ET_KK_RETURN item.

extern NSString * const kLoadET_RETURNCompletedNotification; ///< Notification key for complete loading of ET_RETURN items.
extern NSString * const kCreateET_RETURNCompletedNotification; ///< Notification key for complete creating a ET_RETURN collection item.
extern NSString * const kUpdateET_RETURNCompletedNotification; ///< Notification key for complete updating a ET_RETURN collection item.
extern NSString * const kDeleteET_RETURNCompletedNotification; ///< Notification key for complete deleting a ET_RETURN item.

extern NSString * const kLoadIT_ARACLARCompletedNotification; ///< Notification key for complete loading of IT_ARACLAR items.
extern NSString * const kCreateIT_ARACLARCompletedNotification; ///< Notification key for complete creating a IT_ARACLAR collection item.
extern NSString * const kUpdateIT_ARACLARCompletedNotification; ///< Notification key for complete updating a IT_ARACLAR collection item.
extern NSString * const kDeleteIT_ARACLARCompletedNotification; ///< Notification key for complete deleting a IT_ARACLAR item.

extern NSString * const kLoadIT_EKSURUCUCompletedNotification; ///< Notification key for complete loading of IT_EKSURUCU items.
extern NSString * const kCreateIT_EKSURUCUCompletedNotification; ///< Notification key for complete creating a IT_EKSURUCU collection item.
extern NSString * const kUpdateIT_EKSURUCUCompletedNotification; ///< Notification key for complete updating a IT_EKSURUCU collection item.
extern NSString * const kDeleteIT_EKSURUCUCompletedNotification; ///< Notification key for complete deleting a IT_EKSURUCU item.

extern NSString * const kLoadIT_FATURA_ADRESCompletedNotification; ///< Notification key for complete loading of IT_FATURA_ADRES items.
extern NSString * const kCreateIT_FATURA_ADRESCompletedNotification; ///< Notification key for complete creating a IT_FATURA_ADRES collection item.
extern NSString * const kUpdateIT_FATURA_ADRESCompletedNotification; ///< Notification key for complete updating a IT_FATURA_ADRES collection item.
extern NSString * const kDeleteIT_FATURA_ADRESCompletedNotification; ///< Notification key for complete deleting a IT_FATURA_ADRES item.

extern NSString * const kLoadIT_ITEMSCompletedNotification; ///< Notification key for complete loading of IT_ITEMS items.
extern NSString * const kCreateIT_ITEMSCompletedNotification; ///< Notification key for complete creating a IT_ITEMS collection item.
extern NSString * const kUpdateIT_ITEMSCompletedNotification; ///< Notification key for complete updating a IT_ITEMS collection item.
extern NSString * const kDeleteIT_ITEMSCompletedNotification; ///< Notification key for complete deleting a IT_ITEMS item.

extern NSString * const kLoadIT_SDREZERVCompletedNotification; ///< Notification key for complete loading of IT_SDREZERV items.
extern NSString * const kCreateIT_SDREZERVCompletedNotification; ///< Notification key for complete creating a IT_SDREZERV collection item.
extern NSString * const kUpdateIT_SDREZERVCompletedNotification; ///< Notification key for complete updating a IT_SDREZERV collection item.
extern NSString * const kDeleteIT_SDREZERVCompletedNotification; ///< Notification key for complete deleting a IT_SDREZERV item.

extern NSString * const kLoadIT_TAHSILATCompletedNotification; ///< Notification key for complete loading of IT_TAHSILAT items.
extern NSString * const kCreateIT_TAHSILATCompletedNotification; ///< Notification key for complete creating a IT_TAHSILAT collection item.
extern NSString * const kUpdateIT_TAHSILATCompletedNotification; ///< Notification key for complete updating a IT_TAHSILAT collection item.
extern NSString * const kDeleteIT_TAHSILATCompletedNotification; ///< Notification key for complete deleting a IT_TAHSILAT item.












#pragma mark -

/**
 A singleton class responsible for sending the appropriate service requests (for retrieving service data needed by the application views) and parsing the responses into semantic objects, using the ZGARENTA_REZERVASYON_SRV service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.
 */
@interface ZGARENTA_REZERVASYON_SRVRequestHandler : NSObject <RequestDelegate, SDMConnectivityHelperDelegate> {
    SDMConnectivityHelper *connectivityHelper;
    ZGARENTA_REZERVASYON_SRVService *service;
    NSString *deviceLanguage;
	ServiceNegotiator *serviceNegotiator;
	SecIdentityRef certificate;
	CSRFData *csrfData;
}

@property (strong, nonatomic, setter = setServiceDocumentURL:) NSString *serviceDocumentURL; ///< ZGARENTA_REZERVASYON_SRV service document URL (used as base URL for service requests). 
@property (strong, nonatomic, setter = setSAPClient:) NSString *client; ///< SAP client (may be empty or nil for default client). 
@property (assign, nonatomic) BOOL useServiceNegotiation; ///< Indicates if the service negotiation process should be performed. This property is considered only when the useLocalMetadata property is set to NO.
@property (assign, nonatomic) BOOL useLocalMetadata; ///< Indicates if the service proxy is initialized using local metadata.
@property (assign, nonatomic) BOOL useJSON; ///< Indicates if the service calls are done using JSON or XML.


/**
 @return ZGARENTA_REZERVASYON_SRVRequestHandler singleton instance.
 */
+ (ZGARENTA_REZERVASYON_SRVRequestHandler *)uniqueInstance;

/**
 @return BOOL indicating if service is valid.
 */
- (BOOL)isServiceValid;

#pragma mark - User Login

/**
 Authenticates the given user name and password against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process.  If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object.
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required, make sure to set the application and SUP server values in the ConnectivitySettings class, before calling this method.
 For enabling Single Sign On (SSO):
 At the first application run pass the username and password to securely store the user credentials on the device.
 At later calls, pass empty credentials to exctract the stored user credentials. 
 @param aUsername The user name used for the authentication. If domain is required, the username should be in the format: [domain]\[user]
 @param aPassword The password for the provided user name.
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword error:(NSError * __autoreleasing *)error;

/**
 Authenticates the client certificate against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process. If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object (without service negotiation).
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required use the executeLoginWithCertificateWithPassword:andFileName:andFileExtension:error: method.
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithCertificateWithError:(NSError *__autoreleasing *)error;

/**
 Authenticates the client certificate against the service, and initiate the service proxy according to the appropriate service URL, metadata and service document. If the useServiceNegotiation propery is YES, the method will also execute the service negotiation as part of the login process. If the useLocalMetadata propery is YES, the method will use the local service metadata in order to initialize the service proxy object (without service negotiation).
 Make sure to call this method before calling any other method of this class for executing service requests.
 If SUP connetivity is required, make sure to set the application and SUP server values in the ConnectivitySettings class, before calling this method.
 @param aPassword Certificate password.
 @param aFileName Certificate file name.
 @param aFileExtension Certificate file extension.
 @param error A pointer to an NSError object.
 @return BOOL indicating if authentication succeeded.
 */
- (BOOL)executeLoginWithCertificateWithPassword:(NSString *)aPassword andFileName:(NSString *)aFileName andFileExtension:(NSString *)aFileExtension error:(NSError *__autoreleasing *)error;



#pragma mark - Service Negotiation

/**
 Updates the service document URL with the result of the best matching service query of the Gateway service catalog.
 Is performed as part of the login process (in the executeLoginWithUsername:andPassword method), if the useServiceNegotiation propery is YES.
 @param authenticator The implementation of Authenticating protocol according to the required authentication method.
 @param error A pointer to an NSError object.
 @return BOOL indicating if service negotiation succeeded.
 */
- (BOOL)negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:(id <Authenticating>)authenticator error:(NSError * __autoreleasing *)error;

#pragma mark - Batch

/**
 Start a batch request which will aggregate all service calls made through the RequestHandler.
 Call the executeBatch method to execute the aggregated calls in one batch request.
 @param aNotificationName A name to post a notification to once the batch request is completed, can be nil.
 */
- (void)startBatchWithNotificationName:(NSString *)aNotificationName;

/**
 Closes a changeSet and adds requests to new changeSet (in batch request).
 */
- (void)closeExistingChangeSet;

/**
 Executes a batch request, call the startBatchWithNotificationName: before in order to initiate a batch request object.
 */
- (void)executeBatch;




#pragma mark - ReservationService methods

/**
 Load the service entity-set ReservationService items, parsed into ReservationService objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadReservationServiceCompletedNotification for operation completion, along with the array of ReservationService items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadReservationService;

/**
 Load the IT_ARACLARSet navigation items for a specific ReservationService item, parsed into IT_ARACLAR objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_ARACLARSetForReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key), and the array of the IT_ARACLAR items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to load its IT_ARACLARSet navigation items.
 */
- (void)loadIT_ARACLARSetForReservationService:(ReservationService *)aReservationService;

/**
 Load the IT_EKSURUCUSet navigation items for a specific ReservationService item, parsed into IT_EKSURUCU objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_EKSURUCUSetForReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key), and the array of the IT_EKSURUCU items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to load its IT_EKSURUCUSet navigation items.
 */
- (void)loadIT_EKSURUCUSetForReservationService:(ReservationService *)aReservationService;

/**
 Load the IT_ITEMSSet navigation items for a specific ReservationService item, parsed into IT_ITEMS objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_ITEMSSetForReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key), and the array of the IT_ITEMS items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to load its IT_ITEMSSet navigation items.
 */
- (void)loadIT_ITEMSSetForReservationService:(ReservationService *)aReservationService;

/**
 Load the IT_FATURA_ADRESSet navigation items for a specific ReservationService item, parsed into IT_FATURA_ADRES objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_FATURA_ADRESSetForReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key), and the array of the IT_FATURA_ADRES items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to load its IT_FATURA_ADRESSet navigation items.
 */
- (void)loadIT_FATURA_ADRESSetForReservationService:(ReservationService *)aReservationService;

/**
 Load the ET_RETURNSet navigation items for a specific ReservationService item, parsed into ET_RETURN objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_RETURNSetForReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key), and the array of the ET_RETURN items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to load its ET_RETURNSet navigation items.
 */
- (void)loadET_RETURNSetForReservationService:(ReservationService *)aReservationService;

/**
 Load the IT_TAHSILATSet navigation items for a specific ReservationService item, parsed into IT_TAHSILAT objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_TAHSILATSetForReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key), and the array of the IT_TAHSILAT items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to load its IT_TAHSILATSet navigation items.
 */
- (void)loadIT_TAHSILATSetForReservationService:(ReservationService *)aReservationService;

/**
 Load the IT_SDREZERVSet navigation items for a specific ReservationService item, parsed into IT_SDREZERV objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_SDREZERVSetForReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key), and the array of the IT_SDREZERV items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to load its IT_SDREZERVSet navigation items.
 */
- (void)loadIT_SDREZERVSetForReservationService:(ReservationService *)aReservationService;

/**
 Creates a ReservationService item and add it to the ReservationService.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key), and the response ReservationService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to create.
 */
- (void)createReservationService:(ReservationService *)aReservationService;

/**
 Creates a IT_ARACLAR item for a ReservationService item (using IT_ARACLARSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_ARACLARCompletedNotification for operation completion, along with the IT_ARACLAR item given as parameter (for kResponseParentItem key), and the response IT_ARACLAR item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewIT_ARACLAR The specific item to create.
 @param aReservationService The item which the created item will be associated to.
 */
- (void)createIT_ARACLAR:(IT_ARACLAR *)aNewIT_ARACLAR forReservationService:(ReservationService *)aReservationService;

/**
 Creates a IT_EKSURUCU item for a ReservationService item (using IT_EKSURUCUSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_EKSURUCUCompletedNotification for operation completion, along with the IT_EKSURUCU item given as parameter (for kResponseParentItem key), and the response IT_EKSURUCU item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewIT_EKSURUCU The specific item to create.
 @param aReservationService The item which the created item will be associated to.
 */
- (void)createIT_EKSURUCU:(IT_EKSURUCU *)aNewIT_EKSURUCU forReservationService:(ReservationService *)aReservationService;

/**
 Creates a IT_ITEMS item for a ReservationService item (using IT_ITEMSSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_ITEMSCompletedNotification for operation completion, along with the IT_ITEMS item given as parameter (for kResponseParentItem key), and the response IT_ITEMS item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewIT_ITEMS The specific item to create.
 @param aReservationService The item which the created item will be associated to.
 */
- (void)createIT_ITEMS:(IT_ITEMS *)aNewIT_ITEMS forReservationService:(ReservationService *)aReservationService;

/**
 Creates a IT_FATURA_ADRES item for a ReservationService item (using IT_FATURA_ADRESSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_FATURA_ADRESCompletedNotification for operation completion, along with the IT_FATURA_ADRES item given as parameter (for kResponseParentItem key), and the response IT_FATURA_ADRES item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewIT_FATURA_ADRES The specific item to create.
 @param aReservationService The item which the created item will be associated to.
 */
- (void)createIT_FATURA_ADRES:(IT_FATURA_ADRES *)aNewIT_FATURA_ADRES forReservationService:(ReservationService *)aReservationService;

/**
 Creates a ET_RETURN item for a ReservationService item (using ET_RETURNSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateET_RETURNCompletedNotification for operation completion, along with the ET_RETURN item given as parameter (for kResponseParentItem key), and the response ET_RETURN item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewET_RETURN The specific item to create.
 @param aReservationService The item which the created item will be associated to.
 */
- (void)createET_RETURN:(ET_RETURN *)aNewET_RETURN forReservationService:(ReservationService *)aReservationService;

/**
 Creates a IT_TAHSILAT item for a ReservationService item (using IT_TAHSILATSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_TAHSILATCompletedNotification for operation completion, along with the IT_TAHSILAT item given as parameter (for kResponseParentItem key), and the response IT_TAHSILAT item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewIT_TAHSILAT The specific item to create.
 @param aReservationService The item which the created item will be associated to.
 */
- (void)createIT_TAHSILAT:(IT_TAHSILAT *)aNewIT_TAHSILAT forReservationService:(ReservationService *)aReservationService;

/**
 Creates a IT_SDREZERV item for a ReservationService item (using IT_SDREZERVSet navigation query).
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_SDREZERVCompletedNotification for operation completion, along with the IT_SDREZERV item given as parameter (for kResponseParentItem key), and the response IT_SDREZERV item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aNewIT_SDREZERV The specific item to create.
 @param aReservationService The item which the created item will be associated to.
 */
- (void)createIT_SDREZERV:(IT_SDREZERV *)aNewIT_SDREZERV forReservationService:(ReservationService *)aReservationService;

/**
 Updates a ReservationService item in the ReservationService.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key), and the response ReservationService item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to update.
 */
- (void)updateReservationService:(ReservationService *)aReservationService;

/**
 Deletes a specific ReservationService item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteReservationServiceCompletedNotification for operation completion, along with the ReservationService item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aReservationService The specific item to delete.
 */
- (void)deleteReservationService:(ReservationService *)aReservationService;

#pragma mark - ET_KK_RETURN methods

/**
 Load the service entity-set ET_KK_RETURN items, parsed into ET_KK_RETURN objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_KK_RETURNCompletedNotification for operation completion, along with the array of ET_KK_RETURN items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadET_KK_RETURN;

/**
 Creates a ET_KK_RETURN item and add it to the ET_KK_RETURN.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateET_KK_RETURNCompletedNotification for operation completion, along with the ET_KK_RETURN item given as parameter (for kResponseParentItem key), and the response ET_KK_RETURN item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_KK_RETURN The specific item to create.
 */
- (void)createET_KK_RETURN:(ET_KK_RETURN *)aET_KK_RETURN;

/**
 Updates a ET_KK_RETURN item in the ET_KK_RETURN.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateET_KK_RETURNCompletedNotification for operation completion, along with the ET_KK_RETURN item given as parameter (for kResponseParentItem key), and the response ET_KK_RETURN item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_KK_RETURN The specific item to update.
 */
- (void)updateET_KK_RETURN:(ET_KK_RETURN *)aET_KK_RETURN;

/**
 Deletes a specific ET_KK_RETURN item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteET_KK_RETURNCompletedNotification for operation completion, along with the ET_KK_RETURN item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_KK_RETURN The specific item to delete.
 */
- (void)deleteET_KK_RETURN:(ET_KK_RETURN *)aET_KK_RETURN;

#pragma mark - ET_RETURN methods

/**
 Load the service entity-set ET_RETURN items, parsed into ET_RETURN objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadET_RETURNCompletedNotification for operation completion, along with the array of ET_RETURN items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadET_RETURN;

/**
 Creates a ET_RETURN item and add it to the ET_RETURN.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateET_RETURNCompletedNotification for operation completion, along with the ET_RETURN item given as parameter (for kResponseParentItem key), and the response ET_RETURN item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_RETURN The specific item to create.
 */
- (void)createET_RETURN:(ET_RETURN *)aET_RETURN;

/**
 Updates a ET_RETURN item in the ET_RETURN.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateET_RETURNCompletedNotification for operation completion, along with the ET_RETURN item given as parameter (for kResponseParentItem key), and the response ET_RETURN item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_RETURN The specific item to update.
 */
- (void)updateET_RETURN:(ET_RETURN *)aET_RETURN;

/**
 Deletes a specific ET_RETURN item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteET_RETURNCompletedNotification for operation completion, along with the ET_RETURN item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aET_RETURN The specific item to delete.
 */
- (void)deleteET_RETURN:(ET_RETURN *)aET_RETURN;

#pragma mark - IT_ARACLAR methods

/**
 Load the service entity-set IT_ARACLAR items, parsed into IT_ARACLAR objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_ARACLARCompletedNotification for operation completion, along with the array of IT_ARACLAR items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadIT_ARACLAR;

/**
 Creates a IT_ARACLAR item and add it to the IT_ARACLAR.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_ARACLARCompletedNotification for operation completion, along with the IT_ARACLAR item given as parameter (for kResponseParentItem key), and the response IT_ARACLAR item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_ARACLAR The specific item to create.
 */
- (void)createIT_ARACLAR:(IT_ARACLAR *)aIT_ARACLAR;

/**
 Updates a IT_ARACLAR item in the IT_ARACLAR.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateIT_ARACLARCompletedNotification for operation completion, along with the IT_ARACLAR item given as parameter (for kResponseParentItem key), and the response IT_ARACLAR item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_ARACLAR The specific item to update.
 */
- (void)updateIT_ARACLAR:(IT_ARACLAR *)aIT_ARACLAR;

/**
 Deletes a specific IT_ARACLAR item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteIT_ARACLARCompletedNotification for operation completion, along with the IT_ARACLAR item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_ARACLAR The specific item to delete.
 */
- (void)deleteIT_ARACLAR:(IT_ARACLAR *)aIT_ARACLAR;

#pragma mark - IT_EKSURUCU methods

/**
 Load the service entity-set IT_EKSURUCU items, parsed into IT_EKSURUCU objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_EKSURUCUCompletedNotification for operation completion, along with the array of IT_EKSURUCU items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadIT_EKSURUCU;

/**
 Creates a IT_EKSURUCU item and add it to the IT_EKSURUCU.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_EKSURUCUCompletedNotification for operation completion, along with the IT_EKSURUCU item given as parameter (for kResponseParentItem key), and the response IT_EKSURUCU item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_EKSURUCU The specific item to create.
 */
- (void)createIT_EKSURUCU:(IT_EKSURUCU *)aIT_EKSURUCU;

/**
 Updates a IT_EKSURUCU item in the IT_EKSURUCU.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateIT_EKSURUCUCompletedNotification for operation completion, along with the IT_EKSURUCU item given as parameter (for kResponseParentItem key), and the response IT_EKSURUCU item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_EKSURUCU The specific item to update.
 */
- (void)updateIT_EKSURUCU:(IT_EKSURUCU *)aIT_EKSURUCU;

/**
 Deletes a specific IT_EKSURUCU item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteIT_EKSURUCUCompletedNotification for operation completion, along with the IT_EKSURUCU item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_EKSURUCU The specific item to delete.
 */
- (void)deleteIT_EKSURUCU:(IT_EKSURUCU *)aIT_EKSURUCU;

#pragma mark - IT_FATURA_ADRES methods

/**
 Load the service entity-set IT_FATURA_ADRES items, parsed into IT_FATURA_ADRES objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_FATURA_ADRESCompletedNotification for operation completion, along with the array of IT_FATURA_ADRES items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadIT_FATURA_ADRES;

/**
 Creates a IT_FATURA_ADRES item and add it to the IT_FATURA_ADRES.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_FATURA_ADRESCompletedNotification for operation completion, along with the IT_FATURA_ADRES item given as parameter (for kResponseParentItem key), and the response IT_FATURA_ADRES item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_FATURA_ADRES The specific item to create.
 */
- (void)createIT_FATURA_ADRES:(IT_FATURA_ADRES *)aIT_FATURA_ADRES;

/**
 Updates a IT_FATURA_ADRES item in the IT_FATURA_ADRES.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateIT_FATURA_ADRESCompletedNotification for operation completion, along with the IT_FATURA_ADRES item given as parameter (for kResponseParentItem key), and the response IT_FATURA_ADRES item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_FATURA_ADRES The specific item to update.
 */
- (void)updateIT_FATURA_ADRES:(IT_FATURA_ADRES *)aIT_FATURA_ADRES;

/**
 Deletes a specific IT_FATURA_ADRES item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteIT_FATURA_ADRESCompletedNotification for operation completion, along with the IT_FATURA_ADRES item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_FATURA_ADRES The specific item to delete.
 */
- (void)deleteIT_FATURA_ADRES:(IT_FATURA_ADRES *)aIT_FATURA_ADRES;

#pragma mark - IT_ITEMS methods

/**
 Load the service entity-set IT_ITEMS items, parsed into IT_ITEMS objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_ITEMSCompletedNotification for operation completion, along with the array of IT_ITEMS items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadIT_ITEMS;

/**
 Creates a IT_ITEMS item and add it to the IT_ITEMS.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_ITEMSCompletedNotification for operation completion, along with the IT_ITEMS item given as parameter (for kResponseParentItem key), and the response IT_ITEMS item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_ITEMS The specific item to create.
 */
- (void)createIT_ITEMS:(IT_ITEMS *)aIT_ITEMS;

/**
 Updates a IT_ITEMS item in the IT_ITEMS.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateIT_ITEMSCompletedNotification for operation completion, along with the IT_ITEMS item given as parameter (for kResponseParentItem key), and the response IT_ITEMS item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_ITEMS The specific item to update.
 */
- (void)updateIT_ITEMS:(IT_ITEMS *)aIT_ITEMS;

/**
 Deletes a specific IT_ITEMS item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteIT_ITEMSCompletedNotification for operation completion, along with the IT_ITEMS item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_ITEMS The specific item to delete.
 */
- (void)deleteIT_ITEMS:(IT_ITEMS *)aIT_ITEMS;

#pragma mark - IT_SDREZERV methods

/**
 Load the service entity-set IT_SDREZERV items, parsed into IT_SDREZERV objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_SDREZERVCompletedNotification for operation completion, along with the array of IT_SDREZERV items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadIT_SDREZERV;

/**
 Creates a IT_SDREZERV item and add it to the IT_SDREZERV.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_SDREZERVCompletedNotification for operation completion, along with the IT_SDREZERV item given as parameter (for kResponseParentItem key), and the response IT_SDREZERV item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_SDREZERV The specific item to create.
 */
- (void)createIT_SDREZERV:(IT_SDREZERV *)aIT_SDREZERV;

/**
 Updates a IT_SDREZERV item in the IT_SDREZERV.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateIT_SDREZERVCompletedNotification for operation completion, along with the IT_SDREZERV item given as parameter (for kResponseParentItem key), and the response IT_SDREZERV item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_SDREZERV The specific item to update.
 */
- (void)updateIT_SDREZERV:(IT_SDREZERV *)aIT_SDREZERV;

/**
 Deletes a specific IT_SDREZERV item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteIT_SDREZERVCompletedNotification for operation completion, along with the IT_SDREZERV item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_SDREZERV The specific item to delete.
 */
- (void)deleteIT_SDREZERV:(IT_SDREZERV *)aIT_SDREZERV;

#pragma mark - IT_TAHSILAT methods

/**
 Load the service entity-set IT_TAHSILAT items, parsed into IT_TAHSILAT objects. 
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kLoadIT_TAHSILATCompletedNotification for operation completion, along with the array of IT_TAHSILAT items (for kResponseItems key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 */
- (void)loadIT_TAHSILAT;

/**
 Creates a IT_TAHSILAT item and add it to the IT_TAHSILAT.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kCreateIT_TAHSILATCompletedNotification for operation completion, along with the IT_TAHSILAT item given as parameter (for kResponseParentItem key), and the response IT_TAHSILAT item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_TAHSILAT The specific item to create.
 */
- (void)createIT_TAHSILAT:(IT_TAHSILAT *)aIT_TAHSILAT;

/**
 Updates a IT_TAHSILAT item in the IT_TAHSILAT.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kUpdateIT_TAHSILATCompletedNotification for operation completion, along with the IT_TAHSILAT item given as parameter (for kResponseParentItem key), and the response IT_TAHSILAT item (for kResponseItem key) or parsing error (for kParsingError key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_TAHSILAT The specific item to update.
 */
- (void)updateIT_TAHSILAT:(IT_TAHSILAT *)aIT_TAHSILAT;

/**
 Deletes a specific IT_TAHSILAT item from its collection.
 May send notifications with the following keys and associated objects (as userInfo dictionary):
 - kDeleteIT_TAHSILATCompletedNotification for operation completion, along with the IT_TAHSILAT item given as parameter (for kResponseParentItem key) or server response error (for kServerResponseError).
 - kAuthenticationNeededNotification for request authentication challenge.
 @param aIT_TAHSILAT The specific item to delete.
 */
- (void)deleteIT_TAHSILAT:(IT_TAHSILAT *)aIT_TAHSILAT;

#pragma mark - Function Import methods



@end
