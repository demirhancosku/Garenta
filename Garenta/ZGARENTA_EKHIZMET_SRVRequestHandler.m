/*
 Auto-Generated by SAP NetWeaver Gateway Productivity Accelerator, Version 1.1.1
 
 File: ZGARENTA_EKHIZMET_SRVRequestHandler.m
 Abstract: A singleton class responsible for sending the appropriate service requests (for retrieving and modifying service data) and parsing the responses into semantic objects, using the ZGARENTA_EKHIZMET_SRV service proxy and the SDMConnectivityHelper class. The sent requests also consider the service URL and the SAP client defined in the application settings. The class is also responsible for sending the appropriate notifications to the application delegate and view controllers, for handling the request success, failure and authentication challenge.  
 
*/
 
#import "ZGARENTA_EKHIZMET_SRVRequestHandler.h"
#import "RequestBuilder.h"
#import "Request.h"
#import "Logger.h"
#import "ErrorHandling.h"
#import "ConnectivitySettings.h"
#import "UsernamePasswordAuthenticator.h"
#import "PortalAuthenticator.h"
#import "CertificateAuthenticator.h"
#import "FormsBasedSAMLAuthenticator.h"
#import "KeychainHelper.h"
#import "SUPHelper.h"
#import "ServiceErrorXmlParser.h"
#import "ServiceErrorJsonParser.h"

#pragma mark - Notifications

//static NSString * const kResponseItem = @"item";
//static NSString * const kResponseItems = @"items";
//static NSString * const kResponseData = @"data";
//static NSString * const kRequestedMediaLink = @"mediaLink";
//static NSString * const kServerResponseError = @"serverError";
//static NSString * const kParsingError = @"parsingError";
//static NSString * const kResponseParentItem = @"parent";
//static NSString * const kBatchRequest = @"BatchRequest";
//
//// Notification keys:
//static NSString * const kAuthenticationNeededNotification = @"AuthenticationNeeded";
static NSString * const kBatchCompletedNotification = @"BatchCompletedNotification";

static NSString * const kRequestUserInfoCompletedNotification = @"requestCompletedNotificaiton";




NSString * const kLoadAdditionalEquipmentServiceSetCompletedNotification = @"LoadAdditionalEquipmentServiceSetCompleted";
NSString * const kLoadAdditionalEquipmentServiceCompletedNotification = @"LoadAdditionalEquipmentServiceCompleted";
NSString * const kLoadEXPT_EKPLISTSetForAdditionalEquipmentServiceCompletedNotification = @"LoadEXPT_EKPLISTSetForAdditionalEquipmentServiceCompleted";
NSString * const kLoadEXPT_SIGORTASetForAdditionalEquipmentServiceCompletedNotification = @"LoadEXPT_SIGORTASetForAdditionalEquipmentServiceCompleted";
NSString * const kLoadEXPT_HIZMETSetForAdditionalEquipmentServiceCompletedNotification = @"LoadEXPT_HIZMETSetForAdditionalEquipmentServiceCompleted";
NSString * const kLoadEXPT_HASARSetForAdditionalEquipmentServiceCompletedNotification = @"LoadEXPT_HASARSetForAdditionalEquipmentServiceCompleted";
NSString * const kLoadEXPT_EKSURUCUSetForAdditionalEquipmentServiceCompletedNotification = @"LoadEXPT_EKSURUCUSetForAdditionalEquipmentServiceCompleted";
NSString * const kCreateAdditionalEquipmentServiceCompletedNotification = @"CreateAdditionalEquipmentServiceCompleted";
NSString * const kUpdateAdditionalEquipmentServiceCompletedNotification = @"UpdateAdditionalEquipmentServiceCompleted";
NSString * const kDeleteAdditionalEquipmentServiceCompletedNotification = @"DeleteAdditionalEquipmentServiceCompleted";

NSString * const kLoadEXPT_EKPLISTSetCompletedNotification = @"LoadEXPT_EKPLISTSetCompleted";
NSString * const kLoadEXPT_EKPLISTCompletedNotification = @"LoadEXPT_EKPLISTCompleted";
NSString * const kCreateEXPT_EKPLISTCompletedNotification = @"CreateEXPT_EKPLISTCompleted";
NSString * const kUpdateEXPT_EKPLISTCompletedNotification = @"UpdateEXPT_EKPLISTCompleted";
NSString * const kDeleteEXPT_EKPLISTCompletedNotification = @"DeleteEXPT_EKPLISTCompleted";

NSString * const kLoadEXPT_EKSURUCUSetCompletedNotification = @"LoadEXPT_EKSURUCUSetCompleted";
NSString * const kLoadEXPT_EKSURUCUCompletedNotification = @"LoadEXPT_EKSURUCUCompleted";
NSString * const kCreateEXPT_EKSURUCUCompletedNotification = @"CreateEXPT_EKSURUCUCompleted";
NSString * const kUpdateEXPT_EKSURUCUCompletedNotification = @"UpdateEXPT_EKSURUCUCompleted";
NSString * const kDeleteEXPT_EKSURUCUCompletedNotification = @"DeleteEXPT_EKSURUCUCompleted";

NSString * const kLoadEXPT_HASARSetCompletedNotification = @"LoadEXPT_HASARSetCompleted";
NSString * const kLoadEXPT_HASARCompletedNotification = @"LoadEXPT_HASARCompleted";
NSString * const kCreateEXPT_HASARCompletedNotification = @"CreateEXPT_HASARCompleted";
NSString * const kUpdateEXPT_HASARCompletedNotification = @"UpdateEXPT_HASARCompleted";
NSString * const kDeleteEXPT_HASARCompletedNotification = @"DeleteEXPT_HASARCompleted";

NSString * const kLoadEXPT_HIZMETSetCompletedNotification = @"LoadEXPT_HIZMETSetCompleted";
NSString * const kLoadEXPT_HIZMETCompletedNotification = @"LoadEXPT_HIZMETCompleted";
NSString * const kCreateEXPT_HIZMETCompletedNotification = @"CreateEXPT_HIZMETCompleted";
NSString * const kUpdateEXPT_HIZMETCompletedNotification = @"UpdateEXPT_HIZMETCompleted";
NSString * const kDeleteEXPT_HIZMETCompletedNotification = @"DeleteEXPT_HIZMETCompleted";

NSString * const kLoadEXPT_SIGORTASetCompletedNotification = @"LoadEXPT_SIGORTASetCompleted";
NSString * const kLoadEXPT_SIGORTACompletedNotification = @"LoadEXPT_SIGORTACompleted";
NSString * const kCreateEXPT_SIGORTACompletedNotification = @"CreateEXPT_SIGORTACompleted";
NSString * const kUpdateEXPT_SIGORTACompletedNotification = @"UpdateEXPT_SIGORTACompleted";
NSString * const kDeleteEXPT_SIGORTACompletedNotification = @"DeleteEXPT_SIGORTACompleted";









#pragma mark -

// Service Negotiation constants (used for the service negotiation process):
static NSString * const CatalogServiceUrl = @"/sap/opu/odata/iwfnd/CatalogService/";
static NSString * const TechnicalServiceName = @"";
static NSInteger const TechnicalServiceVersionMin = 0;
static NSInteger const TechnicalServiceVersionMax = 0;

@implementation ZGARENTA_EKHIZMET_SRVRequestHandler

#pragma mark - Initialization

- (id)init
{
    self = [super init];
    if (self) { 
        service = [[ZGARENTA_EKHIZMET_SRVService alloc] init]; // This will be re-initiated with the updated metadata from the server (according to the user locale), in first login. See executeLoginWithUsername:andPassword:error method implementation.
		
        connectivityHelper = [[SDMConnectivityHelper alloc] init];
        connectivityHelper.delegate = self;
        
        self.useServiceNegotiation = YES; // Can be later set to 'NO' to disable service negotiation
        
        deviceLanguage = [NSLocale preferredLanguages][0]; // Language ISO 639 code (2 letters)
    }
    return self;
}

#pragma mark - Singleton

+ (ZGARENTA_EKHIZMET_SRVRequestHandler *)uniqueInstance
{
    static ZGARENTA_EKHIZMET_SRVRequestHandler *instance;
	
    @synchronized(self) {
        if (!instance) {
            instance = [[ZGARENTA_EKHIZMET_SRVRequestHandler alloc] init];
        }
        return instance;
    }
}

#pragma mark - User Login

- (NSData *)executeServiceDocumentRequestAndReturnError:(NSError * __autoreleasing *)error
{
    id<Requesting> serviceDocumentRequest = [connectivityHelper executeBasicSyncRequestWithQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:self.serviceDocumentURL]]];
    
    if ((!serviceDocumentRequest.error) && (serviceDocumentRequest.responseStatusCode == 200) && serviceDocumentRequest.responseData) {
        //Authentication succeeded
        return serviceDocumentRequest.responseData;
    }
    else {
        //Authentication failed
        NSString *errorMessage = NSLocalizedString(@"Login failed.", @"Login failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:LOGIN_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(@"Error getting service document. Login failed.");
        return nil;
    }
}

- (NSData *)executeServiceMetadataRequestAndReturnError:(NSError * __autoreleasing *)error
{
    NSString *serviceMetadataUrl = [NSString stringWithFormat:@"%@/$metadata",self.serviceDocumentURL];
    id<Requesting> serviceMetadataRequest = [connectivityHelper executeBasicSyncRequestWithQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:serviceMetadataUrl]]];
    
    if ((!serviceMetadataRequest.error) && (serviceMetadataRequest.responseStatusCode == 200) && serviceMetadataRequest.responseData) {
        //Authentication succeeded
        return serviceMetadataRequest.responseData;
    }
    else {
        //Authentication failed
        NSString *errorMessage = NSLocalizedString(@"Login failed.", @"Login failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:LOGIN_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(@"Error getting service metadata. Login failed");
        return nil;
    }
}

- (id <Authenticating>)activateCertificateAuthentication
{
    CertificateAuthenticator *authenticator = [[CertificateAuthenticator alloc] init];
    // The initialized certificate authenticator takes the certificate from the Keychain and exposes it using the following property
    certificate = authenticator.certificate;
    return authenticator;
}

- (id <Authenticating>)activatePortalAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    return [[PortalAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
}

- (id <Authenticating>)activateUsernamePasswordAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    return [[UsernamePasswordAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
}

- (id <Authenticating>)activateFormsBasedSAMLAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    return [[FormsBasedSAMLAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
}

// Initiate the appropriate authenticating implementation according to the Authentication Type configured in the ConnectivitySettings.
- (id <Authenticating>)activateAuthenticationWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    id <Authenticating> authenticator;
    // in case in SUP mode, authentication type is defined between SUP Server and Gateway, so we need a simple UsernamePasswordAuthenticator
    if([ConnectivitySettings isSUPMode]) {
        return [[UsernamePasswordAuthenticator alloc] initWithUsername:aUsername andPassword:aPassword];
    }
    else if ([ConnectivitySettings isGWAASMode]) {
        // in case in GWaaS mode, authentication type is defined on the IDP, so we need the FormsBasedSAMLAuthenticator
        return [self activateFormsBasedSAMLAuthenticationWithUsername:aUsername andPassword:aPassword];
    }
    else {
        // in this case we don't use SUP server or GWaaS so we need to define the correct authenticator
        if ([ConnectivitySettings authenticationType] == UsernamePasswordAuthenticationType) {
            authenticator =  [self activateUsernamePasswordAuthenticationWithUsername:aUsername andPassword:aPassword];
        }
        else if ([ConnectivitySettings authenticationType] == PortalAuthenticationType) {
           authenticator =  [self activatePortalAuthenticationWithUsername:aUsername andPassword:aPassword];
        }
        else if ([ConnectivitySettings authenticationType] == CertificateAuthenticationType) {
            authenticator = [self activateCertificateAuthentication];
        }
        else if ([ConnectivitySettings authenticationType] == FormsBasedSAMLAuthenticationType) {
            authenticator = [self activateFormsBasedSAMLAuthenticationWithUsername:aUsername andPassword:aPassword];
        }
    }
    // Set SAP client:
    authenticator.sapClient = self.client; 
    
    return authenticator;
}

- (BOOL)isServiceDocumentURLValidAndReturnError:(NSError * __autoreleasing *)error
{
    if ([self.serviceDocumentURL length] == 0) {
        NSString *errorMessage = NSLocalizedString(@"Service URL is empty.", @"Service URL is empty.");
        if([ConnectivitySettings isSUPMode]) {
            errorMessage = NSLocalizedString(@"Application End Point URL returned from SUP server is empty.", @"Application End Point URL returned from SUP server is empty."); 
        }
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_URL_EMPTY_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(errorMessage);
        return NO;
    }
    return YES;
}

- (BOOL)setURLAndClientWithSUPApplicationEndPointAndReturnError:(NSError * __autoreleasing *)error
{
    NSString *endPointURL = nil;
    if ([KeychainHelper isCredentialsSaved]){
        CredentialsData *credentials = [KeychainHelper loadCredentialsAndReturnError:error];
        if (credentials) {
            endPointURL = [SUPHelper getSUPApplicationEndPointWithCredentials:credentials error:error];
        }
    }
    
    if ([endPointURL length] == 0) {
        self.serviceDocumentURL = nil;
        self.client = nil;
        NSString *errorMessage = NSLocalizedString(@"Login failed.", @"Login failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:LOGIN_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        NSString *errorLogMessage = [NSString stringWithFormat:@"Error getting Application End Point URL from SUP server. Login failed. %@.",[*error localizedDescription]];
        LOGERROR(errorLogMessage);
        return NO;
    }
    
    // Extract Base URL and SAP Client from application end point URL:
    
    NSRange range = [endPointURL rangeOfString:@"?"];
    
    if (range.location != NSNotFound) {

        self.serviceDocumentURL = [endPointURL substringToIndex:range.location]; // URL without parameters
        
        // Extract SAP Client parameter:
        NSString *parameters = [endPointURL substringFromIndex:(range.location + range.length)];
        range = [parameters rangeOfString:@"sap-client="];
        NSString *clientValue = nil;
        if (range.location != NSNotFound) {
            
           clientValue = [parameters substringFromIndex:(range.location + range.length)];
            
            // Remove what's after & or / charachters (if exist) from client value
            NSRange range = [clientValue rangeOfString:@"&"];
            if (range.location == NSNotFound) {
               range = [clientValue rangeOfString:@"/"];        
            }
            if (range.location != NSNotFound) {
                clientValue = [clientValue substringToIndex:range.location];
            }
        }
        
        self.client = clientValue;
    }
    else {
        self.serviceDocumentURL = endPointURL;
        self.client = nil;
    }
    
    return YES;
}

- (BOOL)executeLoginWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword error:(NSError *__autoreleasing *)error
{
    // In case local metadata is used to initiate the service proxy, validate the service before continue with authentication flow
    if (self.useLocalMetadata && ![self isServiceValid]) {
        NSString *errorMessage = NSLocalizedString(@"Service metadata is invalid. Please contact your administrator.", @"Service metadata is invalid. Please contact your administrator.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_METADATA_PARSE_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(errorMessage);
        return NO;
    }
    
    // Activate required authentication type (and set SAP client):
    id <Authenticating> authenticator = [self activateAuthenticationWithUsername:aUsername andPassword:aPassword];
    
    if ([ConnectivitySettings isSUPMode]) {
        // Get application end point from SUP server and use it as a base for the application requests.
        BOOL applicationEndPointReceived = [self setURLAndClientWithSUPApplicationEndPointAndReturnError:error];
        authenticator.sapClient = self.client;
        if (!applicationEndPointReceived) {
            return NO;
        }
    }
    
    // Check that the service URL property was set (from App Delegate or from SUP application end point)
    if (![self isServiceDocumentURLValidAndReturnError:error]) {
        return NO;
    }

    // In case local metadata is used, it's enought to call authenticator to validate credentials without parsing the response
    if (self.useLocalMetadata) {
        // Get service document using the authenticator (negotiation is not supported in this scenario):
        NSData *serviceDocumentData = [authenticator authenticateWithODataQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:self.serviceDocumentURL]] error:error];
        
        if (serviceDocumentData) {
            return YES;
        }
        return NO;
    }
    // In case local metadata is not used, negotiate the best matching service version, get the service data, the service metadata, and re-initialize the service proxy object
    else {
        //Negotiate using the authenticator:
        BOOL serviceNegotiationResult = [self negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:authenticator error:error];
        
        NSData *serviceDocumentData = nil;
        if (serviceNegotiationResult) {
            LOGNOTICE(@"Service negotiation succeeded.");
            // Get service document without authentication (rely on session cookie)
            serviceDocumentData = [self executeServiceDocumentRequestAndReturnError:error];
        }
        else {
            // Get service document using the authenticator:
            serviceDocumentData = [authenticator authenticateWithODataQuery:[[ODataQuery alloc] initWithURL:[NSURL URLWithString:self.serviceDocumentURL]] error:error];
        }
        // Get service metadata and use it to init the service proxy object:
        if (serviceDocumentData) {
            NSData *serviceMetadataData = [self executeServiceMetadataRequestAndReturnError:error];
            if (serviceMetadataData) {
                service = [[ZGARENTA_EKHIZMET_SRVService alloc] initWithServiceDocument:serviceDocumentData andMedatadata:serviceMetadataData];
                [service setServiceDocumentUrl:self.serviceDocumentURL];
                if ([self isServiceValid]) {
                    return YES;
                }
                else {
                    NSString *errorMessage = NSLocalizedString(@"Service metadata is invalid. Please contact your administrator.", @"Service metadata is invalid. Please contact your administrator.");
                    if (error) {
                        *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_METADATA_PARSE_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
                    }
                    LOGERROR(errorMessage);
                    return NO;
                }
            }
        }
        return NO;
    }    
}

- (BOOL)executeLoginWithCertificateWithPassword:(NSString *)aPassword andFileName:(NSString *)aFileName andFileExtension:(NSString *)aFileExtension error:(NSError *__autoreleasing *)error
{
    if ([ConnectivitySettings isSUPMode]) {
        NSString *thePath = [[NSBundle mainBundle]
                             pathForResource:aFileName ofType:aFileExtension];
        if ([thePath length] > 0) {
	        CredentialsData *credentialsData = nil;
            @try {
                credentialsData = [SUPHelper getCredentialsFromCertificateFile:thePath withCertificatePassword:aPassword error:error];
            }
            @catch (NSException* e) {
                NSString *logError = [e description];
                LOGERROR(logError);
            }
	        if (!credentialsData) {
	        	NSString *errorMessage = NSLocalizedString(@"Failed to get certificate string from file", @"Failed to get certificate string from file");
	        	if (error) {
                    if(*error) {
                        NSString *logMessage = [*error localizedDescription];
                        LOGERROR(logMessage);
                    }
                    else {
                        *error = [NSError errorWithDomain:ERROR_DOMAIN code:CERTIFICATE_HANDLING_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
                        LOGERROR(errorMessage);
                    }
                }
                else {
                    LOGERROR(errorMessage);
                }
                return NO;
            }
	        return [self executeLoginWithUsername:credentialsData.username andPassword:credentialsData.password error:error];
        }
        else {
        	NSString *localizedMessage = NSLocalizedString(@"Failed to extract Identity from certificate. Verify that certificate named %@.%@ exists", @"Failed to extract Identity from certificate. Verify that certificate named %@.%@ exists");
        	NSString *errorMessage = [NSString stringWithFormat:localizedMessage, aFileName, aFileExtension];
        	if(error) {
        		*error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:CERTIFICATE_HANDLING_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        	}
        	LOGERROR(errorMessage);
        	return NO;
        }
    }
    return [self executeLoginWithUsername:nil andPassword:nil error:error];
}

- (BOOL)executeLoginWithCertificateWithError:(NSError *__autoreleasing *)error
{
    return [self executeLoginWithCertificateWithPassword:nil andFileName:nil andFileExtension:nil error:error];
}


#pragma mark - Service Negotitation Methods

- (NSData *)executeServiceNegotiationRequestUsingAuthenticator:(id <Authenticating>)authenticator AndReturnError:(NSError * __autoreleasing *)error
{
	NSData *serviceNegotiationResponse = nil;
    NSError *serviceNegotiationError = nil;
	
    ODataQuery *query = [serviceNegotiator getBestMatchingServiceQuery];
	if (query) {
		serviceNegotiationResponse = [authenticator authenticateWithODataQuery:query error:&serviceNegotiationError];
	}
	else {
		return nil;
	}
    
    if (!serviceNegotiationError) {
		return serviceNegotiationResponse;
    }
    else {
        NSString *errorMessage = NSLocalizedString(@"Service negotiation failed.", @"Service negotiation failed.");
        if (error) {
            *error = [[NSError alloc] initWithDomain:ERROR_DOMAIN code:SERVICE_NEGOTIATION_ERROR_CODE userInfo:@{NSLocalizedDescriptionKey: errorMessage}];
        }
        LOGERROR(@"Error getting best matching service. Service negotiation failed.");
        return nil;
    }
}

- (BOOL)negotiateServiceVersionAndUpdateServiceDocumentUrlUsingAuthenticator:(id <Authenticating>)authenticator error:(NSError * __autoreleasing *)error
{
	if (!self.useServiceNegotiation) {
		LOGNOTICE(@"Skipping service negotiation process.");
		return NO;
	}
		
	NSString *catalogServiceUrl = CatalogServiceUrl;
    // If in GWaaS mode then set appropriate catalog service url 
    if ([ConnectivitySettings isGWAASMode]) {
        catalogServiceUrl = @"/CATALOGSERVICE/";
    }
    
	// Initialize service negotiation object
	serviceNegotiator = [[ServiceNegotiator alloc] initWithServiceUrl:self.serviceDocumentURL andCatalogRelativeUrl:catalogServiceUrl];
	
	if (!serviceNegotiator) {
		LOGNOTICE(@"ServiceNegotiator was not initialized. Skipping service negotiation process.");
		return NO;
	}
	
	serviceNegotiator.technicalServiceName = TechnicalServiceName;
	serviceNegotiator.technicalServiceVersionMin = TechnicalServiceVersionMin;
	serviceNegotiator.technicalServiceVersionMax = TechnicalServiceVersionMax;
	
	NSData *serviceData = [self executeServiceNegotiationRequestUsingAuthenticator:authenticator AndReturnError:error];
	
	if (serviceData && [serviceNegotiator parseBestMatchingServiceResultWithData:serviceData]) {
		if (serviceNegotiator.bestMatchingServiceUrl && serviceNegotiator.bestMatchingServiceUrl.length > 0) {
			LOGNOTICE(@"Service negotiation process completed successfully. Updating service document URL.");
			self.serviceDocumentURL = serviceNegotiator.bestMatchingServiceUrl;
            // Make sure the service negotiation process runs only once.
            self.useServiceNegotiation = NO;
            return YES;
		}
	}
	return NO;
}

#pragma mark - Batch

- (void)startBatchWithNotificationName:(NSString *)aNotificationName
{
    [self loadCSRFData];
    
    NSDictionary *userInfoDict = nil;
    if ([aNotificationName length] > 0) {
        userInfoDict = @{kBatchCompletedNotification : aNotificationName};
    }
    [connectivityHelper startBatchAsyncWithURL:[[service.serviceDocumentQuery getUrl] absoluteString] andDelegate:self andSelector:@selector(executeBatchCompleted:) andUserInfo:userInfoDict];
}

- (void)closeExistingChangeSet
{
    [connectivityHelper closeExistingChangeSet];
}

- (void)executeBatch
{
    [connectivityHelper executeBatchAsync:csrfData];
}

- (void)executeBatchCompleted:(BatchRequest *)batchRequest
{
    NSArray *requests = [batchRequest requestArray];
    for (int i = 0; i < [requests count]; i++) {
        if ([requests[i] isKindOfClass:[NSArray class]]) {
            for (Request *request in requests[i]) {
                [self performSelectorOnMainThread:request.didFinishSelector withObject:request waitUntilDone:NO];
            }
        }
        else {
            [self performSelectorOnMainThread:((Request *)requests[i]).didFinishSelector withObject:requests[i] waitUntilDone:NO];
        }
    }
    
    NSDictionary *userInfo = batchRequest.userInfo;
    NSString *notificationName = userInfo[kBatchCompletedNotification];
    if ([notificationName length] > 0) {
        NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:userInfo];
        userInfoDict[kBatchRequest] = batchRequest;
        [[NSNotificationCenter defaultCenter] postNotificationName:notificationName object:self userInfo:userInfoDict];
    }

}

#pragma mark - Instance methods

- (BOOL)isServiceValid
{
    return (service != nil);
}

- (void)setServiceDocumentURL:(NSString *)serviceDocumentURL
{
    _serviceDocumentURL = serviceDocumentURL;
    
    if ([self.serviceDocumentURL length] > 0) {
        [service setServiceDocumentUrl:self.serviceDocumentURL];
    }
}

- (void)setSAPClient:(NSString *)client
{
    _client = client;
    connectivityHelper.sapClient = self.client;
}

- (void)loadCSRFData
{
    if (!csrfData ) {
        csrfData  = [connectivityHelper getCSRFDataForServiceQuery:service.serviceDocumentQuery];
    }
}




#pragma mark - AdditionalEquipmentServiceSet methods
#pragma mark Read

- (void)loadAdditionalEquipmentServiceSetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getAdditionalEquipmentServiceSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadAdditionalEquipmentServiceSetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadAdditionalEquipmentServiceSet
{
    ODataQuery *query = service.AdditionalEquipmentServiceSetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadAdditionalEquipmentServiceSetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadAdditionalEquipmentServiceSetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadAdditionalEquipmentServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    AdditionalEquipmentService *item = [AdditionalEquipmentService parseExpandedAdditionalEquipmentServiceEntryWithData:request.responseData andServiceDocument:service.sdmServiceDocument error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
    [self loadAdditionalEquipmentService:aAdditionalEquipmentService expand:NO];
}

- (void)loadAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService expand:(BOOL)expand
{
//    ODataQuery *query = [[ODataQuery alloc] initWithURL:[NSURL URLWithString:@"https://garentarezapp.celikmotor.com.tr:8000/sap/opu/odata/sap/ZGARENTA_EKHIZMET_SRV"]];
    ODataQuery *query = [service getAdditionalEquipmentServiceSetEntryQueryTypedWithImppBegda:aAdditionalEquipmentService.ImppBegda andImppBeguz:aAdditionalEquipmentService.ImppBeguz andImppDsube:aAdditionalEquipmentService.ImppDsube andImppEndda:aAdditionalEquipmentService.ImppEndda andImppEnduz:aAdditionalEquipmentService.ImppEnduz andImppFikod:aAdditionalEquipmentService.ImppFikod andImppGrpkod:aAdditionalEquipmentService.ImppGrpkod andImppKampid:aAdditionalEquipmentService.ImppKampid andImppLangu:aAdditionalEquipmentService.ImppLangu andImppMarkaid:aAdditionalEquipmentService.ImppMarkaid andImppModelid:aAdditionalEquipmentService.ImppModelid andImppMsube:aAdditionalEquipmentService.ImppMsube andImppRezno:aAdditionalEquipmentService.ImppRezno andImppSozno:aAdditionalEquipmentService.ImppSozno];
    if (expand) {
        [query expand:@"EXPT_EKPLISTSet,EXPT_SIGORTASet,EXPT_HIZMETSet,EXPT_HASARSet,EXPT_EKSURUCUSet"]; 
    }
    NSDictionary *userInfoDict = @{kResponseParentItem : aAdditionalEquipmentService , kRequestUserInfoCompletedNotification : kLoadAdditionalEquipmentServiceCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadAdditionalEquipmentServiceCompleted:) andUserInfo:userInfoDict];
}

- (void)loadEXPT_EKPLISTSetForAdditionalEquipmentServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    AdditionalEquipmentService *parentAdditionalEquipmentServiceItem = request.userInfo[kResponseParentItem];
    [parentAdditionalEquipmentServiceItem loadEXPT_EKPLISTSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentAdditionalEquipmentServiceItem.EXPT_EKPLISTSet;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_EKPLISTSetForAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadEXPT_EKPLISTSetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
    ODataQuery *query = aAdditionalEquipmentService.EXPT_EKPLISTSetQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aAdditionalEquipmentService , kRequestUserInfoCompletedNotification : kLoadEXPT_EKPLISTSetForAdditionalEquipmentServiceCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_EKPLISTSetForAdditionalEquipmentServiceCompleted:) andUserInfo:userInfoDict];
}

- (void)loadEXPT_SIGORTASetForAdditionalEquipmentServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    AdditionalEquipmentService *parentAdditionalEquipmentServiceItem = request.userInfo[kResponseParentItem];
    [parentAdditionalEquipmentServiceItem loadEXPT_SIGORTASetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentAdditionalEquipmentServiceItem.EXPT_SIGORTASet;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_SIGORTASetForAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadEXPT_SIGORTASetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
    ODataQuery *query = aAdditionalEquipmentService.EXPT_SIGORTASetQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aAdditionalEquipmentService , kRequestUserInfoCompletedNotification : kLoadEXPT_SIGORTASetForAdditionalEquipmentServiceCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_SIGORTASetForAdditionalEquipmentServiceCompleted:) andUserInfo:userInfoDict];
}

- (void)loadEXPT_HIZMETSetForAdditionalEquipmentServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    AdditionalEquipmentService *parentAdditionalEquipmentServiceItem = request.userInfo[kResponseParentItem];
    [parentAdditionalEquipmentServiceItem loadEXPT_HIZMETSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentAdditionalEquipmentServiceItem.EXPT_HIZMETSet;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_HIZMETSetForAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadEXPT_HIZMETSetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
    ODataQuery *query = aAdditionalEquipmentService.EXPT_HIZMETSetQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aAdditionalEquipmentService , kRequestUserInfoCompletedNotification : kLoadEXPT_HIZMETSetForAdditionalEquipmentServiceCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_HIZMETSetForAdditionalEquipmentServiceCompleted:) andUserInfo:userInfoDict];
}

- (void)loadEXPT_HASARSetForAdditionalEquipmentServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    AdditionalEquipmentService *parentAdditionalEquipmentServiceItem = request.userInfo[kResponseParentItem];
    [parentAdditionalEquipmentServiceItem loadEXPT_HASARSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentAdditionalEquipmentServiceItem.EXPT_HASARSet;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_HASARSetForAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadEXPT_HASARSetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
    ODataQuery *query = aAdditionalEquipmentService.EXPT_HASARSetQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aAdditionalEquipmentService , kRequestUserInfoCompletedNotification : kLoadEXPT_HASARSetForAdditionalEquipmentServiceCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_HASARSetForAdditionalEquipmentServiceCompleted:) andUserInfo:userInfoDict];
}

- (void)loadEXPT_EKSURUCUSetForAdditionalEquipmentServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    AdditionalEquipmentService *parentAdditionalEquipmentServiceItem = request.userInfo[kResponseParentItem];
    [parentAdditionalEquipmentServiceItem loadEXPT_EKSURUCUSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItems] = parentAdditionalEquipmentServiceItem.EXPT_EKSURUCUSet;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_EKSURUCUSetForAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)loadEXPT_EKSURUCUSetForAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
    ODataQuery *query = aAdditionalEquipmentService.EXPT_EKSURUCUSetQuery;
    NSDictionary *userInfoDict = @{kResponseParentItem : aAdditionalEquipmentService , kRequestUserInfoCompletedNotification : kLoadEXPT_EKSURUCUSetForAdditionalEquipmentServiceCompletedNotification}; 
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_EKSURUCUSetForAdditionalEquipmentServiceCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createAdditionalEquipmentServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        AdditionalEquipmentService *item = [AdditionalEquipmentService parseAdditionalEquipmentServiceEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aAdditionalEquipmentService error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aAdditionalEquipmentService error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aAdditionalEquipmentService , kRequestUserInfoCompletedNotification : kCreateAdditionalEquipmentServiceCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.AdditionalEquipmentServiceSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createAdditionalEquipmentServiceCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createEXPT_EKPLIST:(EXPT_EKPLIST *)aNewEXPT_EKPLIST forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aNewEXPT_EKPLIST error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aNewEXPT_EKPLIST error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_EKPLISTCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewEXPT_EKPLIST , kRequestUserInfoCompletedNotification : kCreateEXPT_EKPLISTCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aAdditionalEquipmentService.EXPT_EKPLISTSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_EKPLISTCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createEXPT_SIGORTA:(EXPT_SIGORTA *)aNewEXPT_SIGORTA forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aNewEXPT_SIGORTA error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aNewEXPT_SIGORTA error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_SIGORTACompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewEXPT_SIGORTA , kRequestUserInfoCompletedNotification : kCreateEXPT_SIGORTACompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aAdditionalEquipmentService.EXPT_SIGORTASetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_SIGORTACompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createEXPT_HIZMET:(EXPT_HIZMET *)aNewEXPT_HIZMET forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aNewEXPT_HIZMET error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aNewEXPT_HIZMET error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_HIZMETCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewEXPT_HIZMET , kRequestUserInfoCompletedNotification : kCreateEXPT_HIZMETCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aAdditionalEquipmentService.EXPT_HIZMETSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_HIZMETCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createEXPT_HASAR:(EXPT_HASAR *)aNewEXPT_HASAR forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aNewEXPT_HASAR error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aNewEXPT_HASAR error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_HASARCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewEXPT_HASAR , kRequestUserInfoCompletedNotification : kCreateEXPT_HASARCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aAdditionalEquipmentService.EXPT_HASARSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_HASARCompleted:) andUserInfo:userInfoDict];
    }
}

- (void)createEXPT_EKSURUCU:(EXPT_EKSURUCU *)aNewEXPT_EKSURUCU forAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aNewEXPT_EKSURUCU error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aNewEXPT_EKSURUCU error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_EKSURUCUCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aNewEXPT_EKSURUCU , kRequestUserInfoCompletedNotification : kCreateEXPT_EKSURUCUCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:aAdditionalEquipmentService.EXPT_EKSURUCUSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_EKSURUCUCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateAdditionalEquipmentServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        AdditionalEquipmentService *item = [AdditionalEquipmentService parseAdditionalEquipmentServiceEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aAdditionalEquipmentService error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aAdditionalEquipmentService error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aAdditionalEquipmentService.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aAdditionalEquipmentService , kRequestUserInfoCompletedNotification : kUpdateAdditionalEquipmentServiceCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateAdditionalEquipmentServiceCompleted:) andUserInfo:userInfoDict andEtag:aAdditionalEquipmentService.etag];
    }
}

#pragma mark Delete

- (void)deleteAdditionalEquipmentServiceCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteAdditionalEquipmentServiceCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteAdditionalEquipmentService:(AdditionalEquipmentService *)aAdditionalEquipmentService 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aAdditionalEquipmentService.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aAdditionalEquipmentService , kRequestUserInfoCompletedNotification : kDeleteAdditionalEquipmentServiceCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteAdditionalEquipmentServiceCompleted:) andUserInfo:userInfoDict andEtag:aAdditionalEquipmentService.etag];
}

#pragma mark - EXPT_EKPLISTSet methods
#pragma mark Read

- (void)loadEXPT_EKPLISTSetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getEXPT_EKPLISTSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_EKPLISTSetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_EKPLISTSet
{
    ODataQuery *query = service.EXPT_EKPLISTSetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadEXPT_EKPLISTSetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_EKPLISTSetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadEXPT_EKPLISTCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    EXPT_EKPLIST *item = [EXPT_EKPLIST parseEXPT_EKPLISTEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_EKPLISTCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_EKPLIST:(EXPT_EKPLIST *)aEXPT_EKPLIST
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_EKPLIST.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_EKPLIST, kRequestUserInfoCompletedNotification : kLoadEXPT_EKPLISTCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_EKPLISTCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createEXPT_EKPLISTCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_EKPLIST *item = [EXPT_EKPLIST parseEXPT_EKPLISTEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_EKPLISTCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createEXPT_EKPLIST:(EXPT_EKPLIST *)aEXPT_EKPLIST
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aEXPT_EKPLIST error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aEXPT_EKPLIST error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_EKPLISTCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_EKPLIST , kRequestUserInfoCompletedNotification : kCreateEXPT_EKPLISTCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.EXPT_EKPLISTSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_EKPLISTCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateEXPT_EKPLISTCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_EKPLIST *item = [EXPT_EKPLIST parseEXPT_EKPLISTEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_EKPLISTCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateEXPT_EKPLIST:(EXPT_EKPLIST *)aEXPT_EKPLIST
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aEXPT_EKPLIST error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aEXPT_EKPLIST error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_EKPLISTCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_EKPLIST.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_EKPLIST , kRequestUserInfoCompletedNotification : kUpdateEXPT_EKPLISTCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateEXPT_EKPLISTCompleted:) andUserInfo:userInfoDict andEtag:aEXPT_EKPLIST.etag];
    }
}

#pragma mark Delete

- (void)deleteEXPT_EKPLISTCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteEXPT_EKPLISTCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteEXPT_EKPLIST:(EXPT_EKPLIST *)aEXPT_EKPLIST 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_EKPLIST.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_EKPLIST , kRequestUserInfoCompletedNotification : kDeleteEXPT_EKPLISTCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteEXPT_EKPLISTCompleted:) andUserInfo:userInfoDict andEtag:aEXPT_EKPLIST.etag];
}

#pragma mark - EXPT_EKSURUCUSet methods
#pragma mark Read

- (void)loadEXPT_EKSURUCUSetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getEXPT_EKSURUCUSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_EKSURUCUSetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_EKSURUCUSet
{
    ODataQuery *query = service.EXPT_EKSURUCUSetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadEXPT_EKSURUCUSetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_EKSURUCUSetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadEXPT_EKSURUCUCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    EXPT_EKSURUCU *item = [EXPT_EKSURUCU parseEXPT_EKSURUCUEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_EKSURUCUCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_EKSURUCU:(EXPT_EKSURUCU *)aEXPT_EKSURUCU
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_EKSURUCU.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_EKSURUCU, kRequestUserInfoCompletedNotification : kLoadEXPT_EKSURUCUCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_EKSURUCUCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createEXPT_EKSURUCUCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_EKSURUCU *item = [EXPT_EKSURUCU parseEXPT_EKSURUCUEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_EKSURUCUCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createEXPT_EKSURUCU:(EXPT_EKSURUCU *)aEXPT_EKSURUCU
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aEXPT_EKSURUCU error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aEXPT_EKSURUCU error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_EKSURUCUCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_EKSURUCU , kRequestUserInfoCompletedNotification : kCreateEXPT_EKSURUCUCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.EXPT_EKSURUCUSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_EKSURUCUCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateEXPT_EKSURUCUCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_EKSURUCU *item = [EXPT_EKSURUCU parseEXPT_EKSURUCUEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_EKSURUCUCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateEXPT_EKSURUCU:(EXPT_EKSURUCU *)aEXPT_EKSURUCU
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aEXPT_EKSURUCU error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aEXPT_EKSURUCU error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_EKSURUCUCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_EKSURUCU.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_EKSURUCU , kRequestUserInfoCompletedNotification : kUpdateEXPT_EKSURUCUCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateEXPT_EKSURUCUCompleted:) andUserInfo:userInfoDict andEtag:aEXPT_EKSURUCU.etag];
    }
}

#pragma mark Delete

- (void)deleteEXPT_EKSURUCUCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteEXPT_EKSURUCUCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteEXPT_EKSURUCU:(EXPT_EKSURUCU *)aEXPT_EKSURUCU 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_EKSURUCU.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_EKSURUCU , kRequestUserInfoCompletedNotification : kDeleteEXPT_EKSURUCUCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteEXPT_EKSURUCUCompleted:) andUserInfo:userInfoDict andEtag:aEXPT_EKSURUCU.etag];
}

#pragma mark - EXPT_HASARSet methods
#pragma mark Read

- (void)loadEXPT_HASARSetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getEXPT_HASARSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_HASARSetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_HASARSet
{
    ODataQuery *query = service.EXPT_HASARSetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadEXPT_HASARSetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_HASARSetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadEXPT_HASARCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    EXPT_HASAR *item = [EXPT_HASAR parseEXPT_HASAREntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_HASARCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_HASAR:(EXPT_HASAR *)aEXPT_HASAR
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_HASAR.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_HASAR, kRequestUserInfoCompletedNotification : kLoadEXPT_HASARCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_HASARCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createEXPT_HASARCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_HASAR *item = [EXPT_HASAR parseEXPT_HASAREntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_HASARCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createEXPT_HASAR:(EXPT_HASAR *)aEXPT_HASAR
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aEXPT_HASAR error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aEXPT_HASAR error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_HASARCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_HASAR , kRequestUserInfoCompletedNotification : kCreateEXPT_HASARCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.EXPT_HASARSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_HASARCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateEXPT_HASARCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_HASAR *item = [EXPT_HASAR parseEXPT_HASAREntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_HASARCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateEXPT_HASAR:(EXPT_HASAR *)aEXPT_HASAR
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aEXPT_HASAR error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aEXPT_HASAR error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_HASARCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_HASAR.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_HASAR , kRequestUserInfoCompletedNotification : kUpdateEXPT_HASARCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateEXPT_HASARCompleted:) andUserInfo:userInfoDict andEtag:aEXPT_HASAR.etag];
    }
}

#pragma mark Delete

- (void)deleteEXPT_HASARCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteEXPT_HASARCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteEXPT_HASAR:(EXPT_HASAR *)aEXPT_HASAR 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_HASAR.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_HASAR , kRequestUserInfoCompletedNotification : kDeleteEXPT_HASARCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteEXPT_HASARCompleted:) andUserInfo:userInfoDict andEtag:aEXPT_HASAR.etag];
}

#pragma mark - EXPT_HIZMETSet methods
#pragma mark Read

- (void)loadEXPT_HIZMETSetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getEXPT_HIZMETSetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_HIZMETSetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_HIZMETSet
{
    ODataQuery *query = service.EXPT_HIZMETSetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadEXPT_HIZMETSetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_HIZMETSetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadEXPT_HIZMETCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    EXPT_HIZMET *item = [EXPT_HIZMET parseEXPT_HIZMETEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_HIZMETCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_HIZMET:(EXPT_HIZMET *)aEXPT_HIZMET
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_HIZMET.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_HIZMET, kRequestUserInfoCompletedNotification : kLoadEXPT_HIZMETCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_HIZMETCompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createEXPT_HIZMETCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_HIZMET *item = [EXPT_HIZMET parseEXPT_HIZMETEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_HIZMETCompletedNotification object:self userInfo:userInfoDict];

}

- (void)createEXPT_HIZMET:(EXPT_HIZMET *)aEXPT_HIZMET
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aEXPT_HIZMET error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aEXPT_HIZMET error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_HIZMETCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_HIZMET , kRequestUserInfoCompletedNotification : kCreateEXPT_HIZMETCompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.EXPT_HIZMETSetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_HIZMETCompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateEXPT_HIZMETCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_HIZMET *item = [EXPT_HIZMET parseEXPT_HIZMETEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_HIZMETCompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateEXPT_HIZMET:(EXPT_HIZMET *)aEXPT_HIZMET
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aEXPT_HIZMET error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aEXPT_HIZMET error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_HIZMETCompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_HIZMET.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_HIZMET , kRequestUserInfoCompletedNotification : kUpdateEXPT_HIZMETCompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateEXPT_HIZMETCompleted:) andUserInfo:userInfoDict andEtag:aEXPT_HIZMET.etag];
    }
}

#pragma mark Delete

- (void)deleteEXPT_HIZMETCompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteEXPT_HIZMETCompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteEXPT_HIZMET:(EXPT_HIZMET *)aEXPT_HIZMET 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_HIZMET.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_HIZMET , kRequestUserInfoCompletedNotification : kDeleteEXPT_HIZMETCompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteEXPT_HIZMETCompleted:) andUserInfo:userInfoDict andEtag:aEXPT_HIZMET.etag];
}

#pragma mark - EXPT_SIGORTASet methods
#pragma mark Read

- (void)loadEXPT_SIGORTASetCompleted:(id <Requesting>)request
{
    NSDictionary *userInfoDict;
    NSError *error;
    NSMutableArray *items = [service getEXPT_SIGORTASetWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict = @{kParsingError: error};
    }
    else {
    	userInfoDict = @{kResponseItems: items};
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_SIGORTASetCompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_SIGORTASet
{
    ODataQuery *query = service.EXPT_SIGORTASetQuery;
    NSDictionary *userInfoDict = @{kRequestUserInfoCompletedNotification : kLoadEXPT_SIGORTASetCompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_SIGORTASetCompleted:) andUserInfo:userInfoDict];
}


- (void)loadEXPT_SIGORTACompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSError *error;
    EXPT_SIGORTA *item = [EXPT_SIGORTA parseEXPT_SIGORTAEntryWithData:request.responseData error:&error];
    if (error) {
    	userInfoDict[kParsingError] = error;
    }
    else {
    	userInfoDict[kResponseItem] = item;
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kLoadEXPT_SIGORTACompletedNotification object:self userInfo:userInfoDict];
}

- (void)loadEXPT_SIGORTA:(EXPT_SIGORTA *)aEXPT_SIGORTA
{
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_SIGORTA.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_SIGORTA, kRequestUserInfoCompletedNotification : kLoadEXPT_SIGORTACompletedNotification};
    [connectivityHelper executeBasicAsyncRequestWithQuery:query andRequestDelegate:self andDidFinishSelector:@selector(loadEXPT_SIGORTACompleted:) andUserInfo:userInfoDict];
}

#pragma mark Create

- (void)createEXPT_SIGORTACompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_SIGORTA *item = [EXPT_SIGORTA parseEXPT_SIGORTAEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_SIGORTACompletedNotification object:self userInfo:userInfoDict];

}

- (void)createEXPT_SIGORTA:(EXPT_SIGORTA *)aEXPT_SIGORTA
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForCreateRequest:aEXPT_SIGORTA error:&error];
    }
    else {
        payload = [service getXMLForCreateRequest:aEXPT_SIGORTA error:&error];
    }
    
	if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kCreateEXPT_SIGORTACompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_SIGORTA , kRequestUserInfoCompletedNotification : kCreateEXPT_SIGORTACompletedNotification};
    	[connectivityHelper executeCreateAsyncRequestWithQuery:service.EXPT_SIGORTASetQuery andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(createEXPT_SIGORTACompleted:) andUserInfo:userInfoDict];
    }
}

#pragma mark Update

- (void)updateEXPT_SIGORTACompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    NSData *responseData = request.responseData;
    if ([responseData length] > 0) {
        NSError *error;
        EXPT_SIGORTA *item = [EXPT_SIGORTA parseEXPT_SIGORTAEntryWithData:responseData error:&error];
        if (error) {
        	userInfoDict[kParsingError] = error;
        }
        else{
        	userInfoDict[kResponseItem] = item;
        }
    }
    [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_SIGORTACompletedNotification object:self userInfo:userInfoDict];

}

- (void)updateEXPT_SIGORTA:(EXPT_SIGORTA *)aEXPT_SIGORTA
{
	[self loadCSRFData];
    NSError *error = nil;
    NSString *payload = nil;
    if (self.useJSON) {
        payload = [service getJSONForUpdateRequest:aEXPT_SIGORTA error:&error];
    }
    else {
        payload = [service getXMLForUpdateRequest:aEXPT_SIGORTA error:&error];
    }
    
    if (error) {
        NSMutableDictionary *userInfoDict = [@{} mutableCopy];
        userInfoDict[kParsingError] = error;
        [[NSNotificationCenter defaultCenter] postNotificationName:kUpdateEXPT_SIGORTACompletedNotification object:self userInfo:userInfoDict];
    }
    else {
        ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_SIGORTA.baseUrl];
    	NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_SIGORTA , kRequestUserInfoCompletedNotification : kUpdateEXPT_SIGORTACompletedNotification};
    	[connectivityHelper executeUpdateAsyncRequestWithQuery:query andBody:payload andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(updateEXPT_SIGORTACompleted:) andUserInfo:userInfoDict andEtag:aEXPT_SIGORTA.etag];
    }
}

#pragma mark Delete

- (void)deleteEXPT_SIGORTACompleted:(id <Requesting>)request
{
    NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
    [[NSNotificationCenter defaultCenter] postNotificationName:kDeleteEXPT_SIGORTACompletedNotification object:self userInfo:userInfoDict];   
}

- (void)deleteEXPT_SIGORTA:(EXPT_SIGORTA *)aEXPT_SIGORTA 
{
	[self loadCSRFData];
    ODataQuery *query = [[ODataQuery alloc] initWithURL:aEXPT_SIGORTA.baseUrl];
    NSDictionary *userInfoDict = @{kResponseParentItem : aEXPT_SIGORTA , kRequestUserInfoCompletedNotification : kDeleteEXPT_SIGORTACompletedNotification};
    [connectivityHelper executeDeleteAsyncRequestWithQuery:query andCSRFData:csrfData andRequestDelegate:self andDidFinishSelector:@selector(deleteEXPT_SIGORTACompleted:) andUserInfo:userInfoDict andEtag:aEXPT_SIGORTA.etag];
}

#pragma mark - Function Import methods

#pragma mark - RequestDelegate

- (void)requestFailed:(Request *)request
{
    int statusCode = request.responseStatusCode;
    if (statusCode == 401) {
        [self authenticationNeededForRequest:request];
        LOGERROR(@"Request failed with authentication error - response status code 401");
    }
    else {
        NSString *errorMessage;
        NSString *logErrorMessage;
        if (statusCode == 403){
            errorMessage = [request responseString];
            NSString *csrfToken = [request responseHeaders][@"x-csrf-token"];
            if (csrfToken.length > 0 && [csrfToken isEqualToString:@"Required"]) {
            	csrfData = nil;
                NSString *localizedMessage = NSLocalizedString(@"CSRF Token is invalid. Try again to get a new token", @"CSRF Token is invalid. Try again to get a new token");
                errorMessage = [NSString stringWithFormat:@"%@. %@", errorMessage, localizedMessage];
                logErrorMessage = [NSString stringWithFormat:@"Request failed due to invalid CSRF with error: %@. Response status code: %d.", errorMessage, statusCode];
            }
        }
        else {
            errorMessage = request.error ? [request.error localizedDescription] : [request responseStatusMessage];
            logErrorMessage = [NSString stringWithFormat:@"Request failed with error: %@. Response status code: %d.", errorMessage, statusCode];
            
            id<ServiceErrorParsing> serviceErrorParser = nil;
            NSString *contentType = [[[request responseHeaders] objectForKey:@"Content-Type"] lowercaseString];
            if ([contentType isEqualToString:@"application/json"]) {
                serviceErrorParser = [[ServiceErrorJsonParser alloc] initWithErrorData:[request responseData]];
            }
            else {
                serviceErrorParser = [[ServiceErrorXmlParser alloc] initWithErrorData:[request responseData]];
            }
            if ([serviceErrorParser parse]) {
                ServiceError *serviceError = [serviceErrorParser result];
                
                if ([serviceError.innerMessage length] > 0){
                    logErrorMessage = [logErrorMessage stringByAppendingString:[NSString stringWithFormat:@" Service error message: %@ Service error inner message: %@", serviceError.message, serviceError.innerMessage]];
                }
                else{
                    logErrorMessage = [logErrorMessage stringByAppendingString:[NSString stringWithFormat:@" Service response: %@", serviceError.message]];
                }
                
                errorMessage = serviceError.message;
            }
            else
            {
                logErrorMessage = [logErrorMessage stringByAppendingString:[NSString stringWithFormat:@" Response body: %@",[request responseString]]];
            }
        }
        LOGERROR(logErrorMessage);
        
        NSMutableDictionary *errorUserInfoDict = [@{} mutableCopy];
        errorUserInfoDict[NSLocalizedDescriptionKey] = errorMessage;
        NSError *error = [NSError errorWithDomain:ERROR_DOMAIN code:REQUEST_FAILED_ERROR_CODE userInfo:errorUserInfoDict];
        
        NSMutableDictionary *userInfoDict = [NSMutableDictionary dictionaryWithDictionary:request.userInfo];
        userInfoDict[kServerResponseError] = error;
        
        // Send error notification (handled by all the application views)
        [[NSNotificationCenter defaultCenter] postNotificationName:request.userInfo[kRequestUserInfoCompletedNotification] object:self userInfo:userInfoDict];
    }
}


- (void)authenticationNeededForRequest:(Request *)request
{
    //Cancel request and send notification for displaying the login screen
    [request cancelAuthentication];
    [[NSNotificationCenter defaultCenter] postNotificationName:kAuthenticationNeededNotification object:self userInfo:nil];
}

#pragma mark - SDMConnectivityHelperDelegate

- (void)onBeforeSend:(id <Requesting>)request
{
	request.shouldPresentAuthenticationDialog = YES;
    [request setTimeOutSeconds:[ApplicationProperties getTimeout]];
    [request setUsername:[ApplicationProperties getSAPUser]];
    [request setPassword:[ApplicationProperties getSAPPassword]];
    if ([ConnectivitySettings isSUPMode]) {
        if ([KeychainHelper isCredentialsSaved]){
            NSError *error = nil;
            CredentialsData *credentials = [KeychainHelper loadCredentialsAndReturnError:&error];
            if (credentials) {
//                [request setUsername:credentials.username];
//                [request setPassword:credentials.password];
            }
            else if(error) {
                NSString *msg = [error localizedDescription];
                LOGERROR(msg);
            }
            else {
                NSString *msg = NSLocalizedString(@"Error while loading credentials from keychain", @"Error while loading credentials from keychain");
                LOGERROR(msg);
            }
        }
    }
    else if ([ConnectivitySettings authenticationType] == CertificateAuthenticationType) {
        [request setClientCertificateIdentity:certificate];
    }

    //Define the request language as the device language settings. Uncomment the following line to use the user default language as defined on the server.
    [request addRequestHeader:@"sap-language" value:deviceLanguage];
        
    if (self.useJSON) {
        NSString *jsonUrl = [request.url absoluteString];
        // Don't use jSON to fetch metadata or service document
        if ([self isJSONAllowedForUrl:jsonUrl]) {
            [request addRequestHeader:@"Content-Type" value:@"application/json"];
            [request addRequestHeader:@"Accept" value:@"application/json"];
        }
    }
}

- (BOOL)isJSONAllowedForUrl:(NSString *)jsonUrl
{
    if ([jsonUrl rangeOfString:@"$metadata" options:NSCaseInsensitiveSearch].location == NSNotFound) {
        if (![self.serviceDocumentURL isEqualToString:jsonUrl]) {
            return YES;
        }
    }
    
    return NO;
}

@end
